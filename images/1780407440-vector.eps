%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 974.eps
%%Creator: Adobe Illustrator(R) 23.0
%%For: 
%%CreationDate: 6/15/2020
%%BoundingBox: 0 0 2000 2022
%%HiResBoundingBox: 0 0 2000 2021.9794
%%CropBox: 0 0 2000 2021.9794
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 23.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 23.0.2 x565 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c145 79.163499, 2018/08/13-16:40:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">000</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2020-06-15T19:31:29+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2020-06-15T19:31:29+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2020-06-15T19:31:29+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 23.0 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEAlgCWAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAlgAAAAEA&#xA;AQCWAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqh5r6GPYfG3gOn35MQJa&#xA;Z5gEJJfzt9khB7f25YMYaJZ5FRaaZursfpOSoNZmT1effmL+dOkeSrwabJb3F7qjwC4ijjKpCAzM&#xA;qiSQtyU/DXZDtkhC2cIyO9vNtH/5yn82x6sj6rYWk2ks4EsECusyJ0qjtIQWHX4hv7YTgDkix1fR&#xA;vlvzRpHmLSbbVdMm9W0u1LQvQrXixVhQgGqspBGY0oEJjkBNdU2yDY7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVskqRryc0GEC2MpACyltxeSS7D4U8PH55dGFOHkzG&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:3ccd2aec-fe2b-3448-a35c-c62da8167803</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:3ccd2aec-fe2b-3448-a35c-c62da8167803</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:08cf9171-c7d0-f149-810c-56d02b92f763</stRef:instanceID>
            <stRef:documentID>xmp.did:08cf9171-c7d0-f149-810c-56d02b92f763</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:95410686-0968-b941-a846-e2db5259eaf3</stEvt:instanceID>
                  <stEvt:when>2019-06-07T12:55:30+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fb95ef5a-053f-5b41-9ab7-50722ec10b05</stEvt:instanceID>
                  <stEvt:when>2019-06-21T13:31:33+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3596cf67-da22-4642-bea2-8e64ff096504</stEvt:instanceID>
                  <stEvt:when>2019-06-24T19:30:03+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:839b39e3-c721-8949-9dd7-1440fb021a41</stEvt:instanceID>
                  <stEvt:when>2019-06-25T20:30:14+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f21873ed-ff22-3548-9cac-51dc4ba4ba42</stEvt:instanceID>
                  <stEvt:when>2019-12-19T14:57:11+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b4a4778a-0ce9-0f4f-aa04-2464220baccc</stEvt:instanceID>
                  <stEvt:when>2019-12-26T22:14:01+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:34eb8c8c-6f51-8748-94a0-530b5dda9b85</stEvt:instanceID>
                  <stEvt:when>2019-12-26T22:17:08+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9b621fb8-9409-ed40-9ad8-d1e5e1ab1f1b</stEvt:instanceID>
                  <stEvt:when>2019-12-27T12:57:48+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8bda6268-f4f3-924e-9d7f-711867a0e736</stEvt:instanceID>
                  <stEvt:when>2019-12-27T15:23:24+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7c62108f-ce3f-fb42-9186-2c858b56e029</stEvt:instanceID>
                  <stEvt:when>2019-12-31T14:12:32+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9f70d36c-23e9-5041-91a2-8ef20b054e85</stEvt:instanceID>
                  <stEvt:when>2019-12-31T14:58:57+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c214b661-1314-2144-b026-9eaa9fafaa71</stEvt:instanceID>
                  <stEvt:when>2020-01-03T00:47:25+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e89364d4-5da2-7943-b4a4-5c62b2843f37</stEvt:instanceID>
                  <stEvt:when>2020-01-03T01:12:07+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:322b1d01-3cbc-c744-bd86-21c89e8466b9</stEvt:instanceID>
                  <stEvt:when>2020-01-03T01:19:11+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e1e644b5-6eed-e840-bfef-f4a83f9bf63c</stEvt:instanceID>
                  <stEvt:when>2020-01-06T18:39:58+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7c4d9015-1284-dd4e-8265-a32a45beba53</stEvt:instanceID>
                  <stEvt:when>2020-01-07T21:26:38+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:470a6565-2257-064b-be3f-675f0bd454bb</stEvt:instanceID>
                  <stEvt:when>2020-01-07T21:30:45+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9e0d36d8-83ad-6e41-ba81-62bce62c0a3b</stEvt:instanceID>
                  <stEvt:when>2020-01-08T19:18:38+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:506e9342-f492-294a-a469-791d1a1d091c</stEvt:instanceID>
                  <stEvt:when>2020-01-09T23:35:43+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3cef3d34-75f5-4a48-a958-c855f92f70af</stEvt:instanceID>
                  <stEvt:when>2020-01-10T18:58:53+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4001b0e7-b37f-d64e-9e50-f1db5f65d712</stEvt:instanceID>
                  <stEvt:when>2020-01-10T22:13:55+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d123cea5-b667-1a46-ae01-c8b2e1b77288</stEvt:instanceID>
                  <stEvt:when>2020-01-10T22:25:31+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4d9e07f8-037e-bc46-a6c6-f3c9f84e91cf</stEvt:instanceID>
                  <stEvt:when>2020-02-04T22:37:49+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ab3597a8-7d1a-594f-be16-aeb97d5a26ca</stEvt:instanceID>
                  <stEvt:when>2020-02-04T22:46:54+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ef2f1c30-40fb-ef44-a542-9bc95c366fc2</stEvt:instanceID>
                  <stEvt:when>2020-02-18T20:01:25+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:35cd3f0d-0e30-cd46-af05-d479450fd88b</stEvt:instanceID>
                  <stEvt:when>2020-02-18T20:52:09+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f18b8dc9-62d4-3e4f-adf5-7367f0b9fd50</stEvt:instanceID>
                  <stEvt:when>2020-02-18T21:32:56+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a178c0ac-9eff-7844-933c-109a82e9b006</stEvt:instanceID>
                  <stEvt:when>2020-02-18T21:39:49+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b807e880-69eb-864f-bf7a-6773641f7b6b</stEvt:instanceID>
                  <stEvt:when>2020-02-18T21:40:19+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4598c452-5ac1-674e-aea7-4e927f2953f1</stEvt:instanceID>
                  <stEvt:when>2020-04-21T14:55:48+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8a667fc3-73d4-9f41-b74c-e62063f8b291</stEvt:instanceID>
                  <stEvt:when>2020-04-21T18:45:05+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e6d127bc-8a52-fb49-aab4-ceca43ce4a36</stEvt:instanceID>
                  <stEvt:when>2020-04-22T23:27:45+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fdb452d8-fd44-1146-9687-50ae012d49e0</stEvt:instanceID>
                  <stEvt:when>2020-04-22T23:45:35+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:902fb1dd-0876-7145-879a-1079765472d1</stEvt:instanceID>
                  <stEvt:when>2020-04-27T20:06:21+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:952f34a7-b9a6-904c-bc66-7535323e02b6</stEvt:instanceID>
                  <stEvt:when>2020-04-29T16:28:11+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:55981c09-13a4-d44f-bd5c-a436813d260c</stEvt:instanceID>
                  <stEvt:when>2020-06-11T22:56:34+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:58ac2dd3-dc7a-f549-90da-42f88fbad9f8</stEvt:instanceID>
                  <stEvt:when>2020-06-11T23:31:46+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:537fcaa4-a01c-6544-87d9-a79420cd7236</stEvt:instanceID>
                  <stEvt:when>2020-06-15T18:16:57+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:53c6f399-4810-c74d-b11f-ee4e2d1c1872</stEvt:instanceID>
                  <stEvt:when>2020-06-15T19:26:40+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:08cf9171-c7d0-f149-810c-56d02b92f763</stEvt:instanceID>
                  <stEvt:when>2020-06-15T19:31+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3ccd2aec-fe2b-3448-a35c-c62da8167803</stEvt:instanceID>
                  <stEvt:when>2020-06-15T19:31:29+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2000.000000</stDim:w>
            <stDim:h>2021.979400</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>29</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>27</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>29</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>27</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -2021.98 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 2021.98 li
2000 2021.98 li
2000 0 li
cp
clp
2000 2021.98 mo
0 2021.98 li
0 0 li
2000 0 li
2000 2021.98 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
492.23 1085.41 mo
532.756 1143.91 582.853 1196.04 639.262 1239.3 cv
679.193 1269.92 722.057 1293.11 759.302 1326 cv
803.32 1364.88 858.409 1395.12 912.385 1417.52 cv
1053.69 1476.17 1216.74 1480.52 1360.97 1429.48 cv
1456.79 1395.57 1546.12 1335.81 1600.27 1249.8 cv
1670.49 1138.25 1671.5 980.381 1570.34 889.454 cv
1517.98 842.391 1456.78 806.516 1397.67 768.273 cv
1320.83 718.56 1229.67 659.01 1202.62 567.776 cv
1188.14 518.927 1159.22 478.321 1154.54 425.038 cv
1141.87 280.79 1018.13 187.145 876.05 194.791 cv
798.758 198.951 724.76 230.208 660.57 273.464 cv
460.716 408.136 353.999 638.448 414.764 876.899 cv
430.609 939.077 445.128 1012.96 479.993 1067.09 cv
483.967 1073.26 488.048 1079.37 492.23 1085.41 cv
.823529 .952941 .976471 rgb
f
1284.28 453.7 mo
1274.34 453.701 1265.71 443.694 1263.63 433.138 cv
1259.51 412.185 1275.65 393.239 1290.29 377.699 cv
1304.94 362.159 1320.38 342.205 1314.63 321.638 cv
1310.86 308.135 1297.02 298.556 1283.17 298.556 cv
1280.57 298.556 1277.96 298.895 1275.43 299.61 cv
1267.01 301.982 1260.11 308.307 1256.16 316.002 cv
1252.6 322.939 1254.43 333.182 1245.65 336.323 cv
1244.37 336.78 1243.03 336.998 1241.68 336.998 cv
1238.27 336.998 1234.83 335.611 1232.39 333.198 cv
1226.29 327.165 1226.91 315.765 1227.2 307.934 cv
1227.98 286.471 1246.23 266.195 1265.83 259.464 cv
1272.56 257.152 1279.57 256.072 1286.61 256.072 cv
1306.43 256.072 1326.45 264.641 1341.09 278.353 cv
1358.27 294.437 1369.04 320.228 1359.88 341.901 cv
1351.81 360.994 1331.34 371.349 1317.92 387.153 cv
1310.04 396.442 1304.8 407.847 1302.48 419.784 cv
1300.51 429.906 1304.3 441.912 1295.26 449.379 cv
1291.59 452.406 1287.85 453.7 1284.28 453.7 cv
.709804 .866667 .917647 rgb
f
1298.79 523.069 mo
1294.37 523.069 1289.87 521.476 1286.36 518.79 cv
1281.97 515.424 1280.43 509.471 1281.25 503.873 cv
1281.81 500.029 1283.49 496.352 1286.11 493.798 cv
1289.41 490.59 1293.9 488.95 1298.38 488.95 cv
1302.64 488.95 1306.89 490.435 1310.12 493.467 cv
1317.43 500.347 1316.59 512.99 1309.09 519.421 cv
1306.14 521.951 1302.5 523.069 1298.79 523.069 cv
f
1438.58 551.244 mo
1432.71 551.244 1427.14 547.446 1425 539.356 cv
1421.26 525.164 1423.17 509.404 1422.31 494.81 cv
1421.37 478.726 1420.85 462.621 1420.17 446.525 cv
1419.11 421.647 1419.45 396.708 1421.18 371.867 cv
1421.61 365.717 1422.17 359.404 1424.9 353.871 cv
1427.62 348.339 1433.01 343.69 1439.17 343.648 cv
1439.2 343.647 1439.23 343.647 1439.26 343.647 cv
1445.82 343.647 1451.48 348.866 1454.04 354.913 cv
1456.62 360.984 1456.71 367.778 1456.77 374.373 cv
1457.13 422.027 1457.24 469.683 1457.34 517.339 cv
1457.36 525.236 1457.31 533.448 1453.87 540.558 cv
1450.51 547.522 1444.4 551.244 1438.58 551.244 cv
f
1441.3 611.398 mo
1432.81 611.398 1424.29 603.697 1424.93 594.953 cv
1425.41 592.093 li
1427.21 585.312 1434.34 581.075 1441.23 581.075 cv
1444.66 581.075 1448.02 582.123 1450.64 584.427 cv
1458.54 591.364 1456 606.455 1446.28 610.436 cv
1444.67 611.095 1442.98 611.398 1441.3 611.398 cv
f
1546.64 813.656 mo
1541.72 813.395 1536.83 813.287 1532.24 812.841 cv
1511.18 810.794 1490.1 813.584 1469.03 813.584 cv
1442.2 813.584 1415.36 813.584 1388.52 813.584 cv
1365.15 813.584 1346.2 794.635 1346.2 771.259 cv
1346.2 723.578 li
1346.2 700.203 1365.15 681.253 1388.52 681.253 cv
1546.87 681.253 li
1570.24 681.253 1589.19 700.203 1589.19 723.58 cv
1589.19 757.439 1589.07 790.944 1587.53 824.783 cv
1587.46 826.354 1587.27 828.146 1586 829.075 cv
1583.64 830.803 1580.71 827.968 1578.87 825.692 cv
1570.92 815.87 1558.72 814.298 1546.64 813.656 cv
.52549 .784314 .866667 rgb
f
1519.85 848.816 mo
1503.09 836.574 1485.86 824.951 1468.43 813.584 cv
1468.63 813.584 1468.83 813.584 1469.03 813.584 cv
1484.45 813.584 1499.87 812.091 1515.28 812.091 cv
1516.81 812.091 1518.33 812.106 1519.85 812.138 cv
1519.85 848.044 li
1519.85 848.302 1519.85 848.558 1519.85 848.816 cv
.709804 .866667 .917647 rgb
f
1281.64 906.392 mo
1281.09 906.392 1280.56 906.232 1280.05 905.859 cv
1278.78 904.93 1278.6 903.139 1278.52 901.567 cv
1276.98 867.728 1276.86 834.224 1276.86 800.364 cv
1276.86 776.988 1295.81 758.038 1319.19 758.038 cv
1346.2 758.038 li
1346.2 771.259 li
1346.2 794.635 1365.15 813.584 1388.52 813.584 cv
1415.16 813.584 1441.79 813.584 1468.43 813.584 cv
1485.86 824.951 1503.09 836.574 1519.85 848.816 cv
1519.44 871.834 1500.65 890.369 1477.53 890.369 cv
1450.69 890.369 1423.86 890.369 1397.02 890.369 cv
1381.6 890.369 1366.19 888.876 1350.77 888.876 cv
1345.12 888.876 1339.46 889.077 1333.81 889.626 cv
1329.22 890.071 1324.33 890.179 1319.42 890.44 cv
1307.33 891.083 1295.13 892.655 1287.18 902.477 cv
1285.74 904.263 1283.62 906.392 1281.64 906.392 cv
.643137 .85098 .909804 rgb
f
1469.03 813.584 mo
1468.83 813.584 1468.63 813.584 1468.43 813.584 cv
1441.79 813.584 1415.16 813.584 1388.52 813.584 cv
1365.15 813.584 1346.2 794.635 1346.2 771.259 cv
1346.2 758.038 li
1477.53 758.038 li
1500.91 758.038 1519.85 776.988 1519.85 800.362 cv
1519.85 812.138 li
1518.33 812.106 1516.81 812.091 1515.28 812.091 cv
1499.87 812.091 1484.45 813.584 1469.03 813.584 cv
.52549 .784314 .866667 rgb
f
1513.49 942.597 mo
1517.86 942.597 1522.25 942.752 1526.64 943.178 cv
1528.93 943.401 1531.34 943.506 1533.89 943.617 cv
1535.01 943.667 1536.14 943.716 1537.27 943.776 cv
1546.33 944.258 1556.53 945.451 1563.66 953.333 cv
1564.69 929.061 1564.77 904.946 1564.77 880.344 cv
1564.77 865.148 1552.41 852.786 1537.22 852.786 cv
1418.27 852.786 li
1403.08 852.786 1390.72 865.147 1390.72 880.342 cv
1390.72 916.16 li
1390.72 931.354 1403.08 943.716 1418.27 943.716 cv
1478.75 943.716 li
1484.44 943.716 1490.27 943.434 1495.92 943.161 cv
1501.68 942.881 1507.56 942.597 1513.49 942.597 cv
cp
1565.43 964.216 mo
1563.42 964.216 1560.82 963.242 1557.97 959.714 cv
1553.01 953.589 1544.8 952.662 1536.82 952.237 cv
1535.72 952.179 1534.62 952.131 1533.52 952.083 cv
1530.97 951.972 1528.34 951.856 1525.82 951.612 cv
1516.1 950.667 1506.05 951.154 1496.33 951.624 cv
1490.58 951.902 1484.64 952.19 1478.75 952.19 cv
1418.27 952.19 li
1398.41 952.19 1382.24 936.027 1382.24 916.16 cv
1382.24 880.342 li
1382.24 860.476 1398.41 844.312 1418.27 844.312 cv
1537.22 844.312 li
1557.08 844.312 1573.25 860.476 1573.25 880.344 cv
1573.25 906.007 1573.15 931.147 1572 956.558 cv
1571.93 957.904 1571.79 961.055 1569.12 963.009 cv
1568.53 963.44 1567.22 964.216 1565.43 964.216 cv
cp
.52549 .784314 .866667 rgb
f
1552.73 719.685 mo
1385.9 719.685 li
1384.27 719.685 1382.94 718.361 1382.94 716.727 cv
1382.94 714.663 li
1382.94 713.029 1384.27 711.705 1385.9 711.705 cv
1552.73 711.705 li
1554.36 711.705 1555.69 713.029 1555.69 714.663 cv
1555.69 716.727 li
1555.69 718.361 1554.36 719.685 1552.73 719.685 cv
cp
1 1 1 rgb
f
1552.73 740.628 mo
1385.9 740.628 li
1384.27 740.628 1382.94 739.304 1382.94 737.671 cv
1382.94 735.606 li
1382.94 733.973 1384.27 732.648 1385.9 732.648 cv
1552.73 732.648 li
1554.36 732.648 1555.69 733.973 1555.69 735.606 cv
1555.69 737.671 li
1555.69 739.304 1554.36 740.628 1552.73 740.628 cv
cp
f
1364.8 1032.53 mo
1351.65 1023.06 li
1338.58 1032.63 li
1343.53 1017.2 li
1330.38 1007.73 li
1346.58 1007.67 li
1351.53 992.233 li
1356.6 1007.63 li
1372.81 1007.56 li
1359.73 1017.14 li
1364.8 1032.53 li
cp
.52549 .784314 .866667 rgb
f
1408.23 1032.53 mo
1395.08 1023.06 li
1382.01 1032.63 li
1386.96 1017.2 li
1373.81 1007.73 li
1390.02 1007.67 li
1394.96 992.233 li
1400.03 1007.63 li
1416.24 1007.56 li
1403.16 1017.14 li
1408.23 1032.53 li
cp
f
1451.66 1032.53 mo
1438.52 1023.06 li
1425.44 1032.63 li
1430.39 1017.2 li
1417.24 1007.73 li
1433.45 1007.67 li
1438.39 992.233 li
1443.46 1007.63 li
1459.67 1007.56 li
1446.6 1017.14 li
1451.66 1032.53 li
cp
f
1495.1 1032.53 mo
1481.95 1023.06 li
1468.87 1032.63 li
1473.82 1017.2 li
1460.67 1007.73 li
1476.88 1007.67 li
1481.83 992.233 li
1486.89 1007.63 li
1503.1 1007.56 li
1490.03 1017.14 li
1495.1 1032.53 li
cp
f
1538.53 1032.53 mo
1525.38 1023.06 li
1512.31 1032.63 li
1517.25 1017.2 li
1504.1 1007.73 li
1520.31 1007.67 li
1525.26 992.233 li
1530.33 1007.63 li
1546.53 1007.56 li
1533.46 1017.14 li
1538.53 1032.53 li
cp
f
618.717 516.434 mo
613.804 516.173 608.908 516.066 604.323 515.62 cv
583.262 513.573 562.183 516.363 541.112 516.363 cv
514.275 516.363 487.44 516.363 460.603 516.363 cv
437.228 516.363 418.279 497.413 418.279 474.037 cv
418.279 426.357 li
418.279 402.981 437.228 384.031 460.603 384.031 cv
618.945 384.031 li
642.32 384.031 661.27 402.981 661.27 426.358 cv
661.27 460.217 661.148 493.722 659.609 527.561 cv
659.537 529.133 659.353 530.924 658.083 531.853 cv
655.72 533.582 652.793 530.746 650.952 528.471 cv
643.001 518.648 630.805 517.076 618.717 516.434 cv
f
353.719 609.171 mo
353.174 609.171 352.639 609.01 352.13 608.638 cv
350.86 607.709 350.676 605.917 350.605 604.346 cv
349.064 570.507 348.943 537.002 348.943 503.142 cv
348.943 479.765 367.893 460.816 391.268 460.816 cv
418.279 460.816 li
418.279 474.037 li
418.279 493.575 431.516 510.021 449.512 514.894 cv
437.738 539.739 427.854 565.367 419.975 591.672 cv
415.28 591.732 410.584 591.948 405.891 592.404 cv
401.305 592.85 396.409 592.958 391.496 593.219 cv
379.408 593.861 367.212 595.433 359.262 605.255 cv
357.816 607.041 355.704 609.171 353.719 609.171 cv
.709804 .866667 .917647 rgb
f
549.609 593.147 mo
522.774 593.147 495.937 593.147 469.102 593.147 cv
453.684 593.147 438.266 591.654 422.85 591.654 cv
421.892 591.654 420.933 591.66 419.975 591.672 cv
427.854 565.367 437.738 539.739 449.512 514.894 cv
453.047 515.852 456.765 516.363 460.603 516.363 cv
487.44 516.363 514.275 516.363 541.112 516.363 cv
556.529 516.363 571.947 514.87 587.363 514.87 cv
588.887 514.87 590.411 514.884 591.935 514.916 cv
591.935 550.822 li
591.935 574.198 572.985 593.147 549.609 593.147 cv
.643137 .85098 .909804 rgb
f
541.112 516.363 mo
514.275 516.363 487.44 516.363 460.603 516.363 cv
456.765 516.363 453.047 515.852 449.512 514.894 cv
431.516 510.021 418.279 493.575 418.279 474.037 cv
418.279 460.816 li
549.609 460.816 li
572.985 460.816 591.935 479.765 591.935 503.141 cv
591.935 514.916 li
590.411 514.884 588.887 514.87 587.363 514.87 cv
571.947 514.87 556.529 516.363 541.112 516.363 cv
.52549 .784314 .866667 rgb
f
585.567 645.375 mo
589.938 645.375 594.333 645.53 598.723 645.957 cv
601.013 646.179 603.421 646.285 605.97 646.396 cv
607.092 646.445 608.221 646.495 609.351 646.554 cv
618.415 647.037 628.611 648.229 635.735 656.112 cv
636.766 631.839 636.854 607.724 636.854 583.122 cv
636.854 567.927 624.492 555.564 609.297 555.564 cv
490.354 555.564 li
475.16 555.564 462.798 567.926 462.798 583.121 cv
462.798 618.938 li
462.798 634.133 475.16 646.495 490.354 646.495 cv
550.83 646.495 li
556.518 646.495 562.354 646.212 567.998 645.939 cv
573.764 645.66 579.645 645.375 585.567 645.375 cv
cp
637.509 666.995 mo
635.504 666.995 632.902 666.02 630.047 662.493 cv
625.088 656.367 616.882 655.44 608.901 655.016 cv
607.797 654.958 606.695 654.909 605.6 654.861 cv
603.052 654.75 600.418 654.635 597.904 654.391 cv
588.177 653.446 578.126 653.932 568.407 654.403 cv
562.663 654.681 556.723 654.968 550.83 654.968 cv
490.354 654.968 li
470.487 654.968 454.324 638.805 454.324 618.938 cv
454.324 583.121 li
454.324 563.254 470.487 547.091 490.354 547.091 cv
609.297 547.091 li
629.165 547.091 645.327 563.254 645.327 583.122 cv
645.327 608.786 645.231 633.925 644.075 659.336 cv
644.014 660.682 643.87 663.833 641.197 665.788 cv
640.608 666.219 639.296 666.994 637.509 666.995 cv
cp
.52549 .784314 .866667 rgb
f
624.808 422.463 mo
457.979 422.463 li
456.346 422.463 455.021 421.139 455.021 419.506 cv
455.021 417.441 li
455.021 415.807 456.346 414.483 457.979 414.483 cv
624.808 414.483 li
626.442 414.483 627.766 415.807 627.766 417.441 cv
627.766 419.506 li
627.766 421.139 626.442 422.463 624.808 422.463 cv
cp
1 1 1 rgb
f
624.808 443.407 mo
457.979 443.407 li
456.346 443.407 455.021 442.082 455.021 440.449 cv
455.021 438.384 li
455.021 436.751 456.346 435.427 457.979 435.427 cv
624.808 435.427 li
626.442 435.427 627.766 436.751 627.766 438.384 cv
627.766 440.449 li
627.766 442.082 626.442 443.407 624.808 443.407 cv
cp
f
436.881 735.31 mo
423.733 725.836 li
410.66 735.414 li
415.607 719.981 li
402.458 710.507 li
418.664 710.443 li
423.611 695.011 li
428.68 710.404 li
444.886 710.34 li
431.813 719.917 li
436.881 735.31 li
cp
.52549 .784314 .866667 rgb
f
480.313 735.31 mo
467.164 725.836 li
454.091 735.414 li
459.038 719.981 li
445.89 710.507 li
462.096 710.443 li
467.043 695.011 li
472.111 710.404 li
488.317 710.34 li
475.244 719.917 li
480.313 735.31 li
cp
f
523.744 735.31 mo
510.596 725.836 li
497.522 735.414 li
502.47 719.981 li
489.322 710.507 li
505.527 710.443 li
510.474 695.011 li
515.543 710.404 li
531.749 710.34 li
518.675 719.917 li
523.744 735.31 li
cp
f
567.175 735.31 mo
554.027 725.836 li
540.954 735.414 li
545.901 719.981 li
532.753 710.507 li
548.958 710.443 li
553.906 695.011 li
558.975 710.404 li
575.18 710.34 li
562.107 719.917 li
567.175 735.31 li
cp
f
610.607 735.31 mo
597.459 725.836 li
584.386 735.414 li
589.333 719.981 li
576.185 710.507 li
592.39 710.443 li
597.337 695.011 li
602.406 710.404 li
618.611 710.34 li
605.539 719.917 li
610.607 735.31 li
cp
f
552.002 992.757 mo
499.818 992.757 457.515 950.453 457.515 898.269 cv
457.515 846.085 499.818 803.782 552.002 803.782 cv
604.186 803.782 646.489 846.085 646.489 898.269 cv
646.489 950.453 604.186 992.757 552.002 992.757 cv
.643137 .85098 .909804 rgb
f
491.579 889.63 mo
490.058 881.462 489.839 872.382 492.707 864.348 cv
494.152 860.294 496.406 856.548 499.511 853.548 cv
502.508 850.651 507.044 846.703 511.37 846.735 cv
519.33 846.794 525.418 852.87 529.024 859.44 cv
532.067 864.985 536.451 876.104 531.373 881.609 cv
527.346 885.974 517.28 883.102 515.341 888.896 cv
512.858 896.316 515.518 907.016 518.771 913.762 cv
521.262 918.929 524.895 923.535 529.302 927.203 cv
532.575 929.927 538.323 935.962 542.728 932.509 cv
547.207 928.998 548.9 923.093 555.946 924.178 cv
559.435 924.715 562.48 926.912 564.821 929.554 cv
569.795 935.168 572.159 943.427 570.661 950.819 cv
569.235 957.853 559.007 960.102 552.909 960.857 cv
545.882 961.728 539.363 960.42 533.439 956.503 cv
527.689 952.701 521.982 948.7 517.438 943.51 cv
506.87 931.44 499.018 917.021 494.511 901.629 cv
493.373 897.74 492.338 893.706 491.579 889.63 cv
cp
1 1 1 rgb
f
578.638 923.586 mo
578.276 923.586 577.908 923.548 577.54 923.471 cv
574.654 922.866 572.804 920.039 573.407 917.152 cv
575.422 907.517 573.938 897.002 569.333 888.299 cv
564.729 879.599 556.87 872.458 547.771 868.708 cv
545.045 867.584 543.746 864.464 544.869 861.736 cv
545.992 859.01 549.115 857.713 551.839 858.835 cv
563.371 863.588 572.935 872.278 578.771 883.307 cv
584.605 894.333 586.413 907.129 583.859 919.338 cv
583.333 921.855 581.112 923.586 578.638 923.586 cv
cp
f
600.655 928.136 mo
600.293 928.136 599.925 928.099 599.557 928.021 cv
596.67 927.417 594.82 924.589 595.423 921.703 cv
598.596 906.537 596.259 889.984 589.012 876.289 cv
581.765 862.598 569.394 851.354 555.071 845.448 cv
552.345 844.324 551.047 841.202 552.171 838.477 cv
553.296 835.751 556.413 834.458 559.142 835.576 cv
575.974 842.519 589.933 855.205 598.449 871.296 cv
606.966 887.388 609.604 906.065 605.875 923.888 cv
605.349 926.405 603.129 928.136 600.655 928.136 cv
cp
f
621.528 930.076 mo
621.167 930.076 620.798 930.039 620.43 929.961 cv
617.544 929.356 615.694 926.528 616.297 923.642 cv
620.315 904.437 617.354 883.478 608.178 866.135 cv
598.999 848.792 583.333 834.556 565.194 827.077 cv
562.468 825.953 561.17 822.831 562.294 820.105 cv
563.417 817.38 566.535 816.087 569.265 817.205 cv
589.667 825.617 607.291 841.632 617.615 861.142 cv
627.938 880.647 631.268 904.226 626.75 925.828 cv
626.223 928.345 624.003 930.076 621.528 930.076 cv
cp
f
527.265 1699.77 mo
524.197 1707.41 521.199 1716.39 525.368 1723.49 cv
529.192 1730 537.45 1732.1 544.85 1733.62 cv
602.471 1745.42 660.092 1757.21 717.713 1769.01 cv
735.922 1772.74 755.758 1776.28 772.365 1767.93 cv
810.581 1748.72 825.821 1677.93 839.772 1642.09 cv
862.206 1584.46 882.575 1526.04 900.827 1466.95 cv
907.586 1445.07 914.116 1421.99 909.435 1399.57 cv
900.362 1356.12 854.559 1332.38 813.874 1314.65 cv
779.685 1299.75 739.789 1284.9 706.579 1301.87 cv
681.724 1314.58 668.087 1341.97 660.022 1368.69 cv
626.184 1480.8 571.396 1589.92 527.265 1699.77 cv
cp
.94902 .611765 .490196 rgb
f
1258.64 771.576 mo
1252.56 764.408 1241.2 765.835 1232.3 768.835 cv
1202.91 778.735 1172.21 801.382 1155.93 827.818 cv
1138.91 855.455 1117.14 878.02 1107.55 910.049 cv
1103.77 922.703 1102.95 939.278 1114.21 946.173 cv
1119.96 949.687 1127.41 949.387 1133.69 946.974 cv
1139.98 944.56 1145.34 940.28 1150.54 936 cv
1197.24 897.533 1249.68 854.291 1261.31 792.161 cv
1262.63 785.12 1263.27 777.041 1258.64 771.576 cv
cp
f
1246.34 900.093 mo
1240.88 892.924 1230.68 894.352 1222.69 897.352 cv
1205.12 903.945 1189.02 915.228 1175.93 929.84 cv
1145.43 963.882 1118.77 1004.35 1109.72 1050.64 cv
1108.48 1057.02 1107.72 1063.68 1109.36 1069.97 cv
1111 1076.25 1115.48 1082.14 1121.74 1083.87 cv
1131.08 1086.43 1140.12 1079.45 1147.15 1072.79 cv
1191.36 1030.93 1238.35 982.482 1248.74 920.678 cv
1249.92 913.636 1250.5 905.558 1246.34 900.093 cv
f
1225.39 1051.01 mo
1240.08 1067.57 1199.06 1126.57 1192.14 1135.87 cv
1181.2 1150.57 1149.67 1193.99 1126.24 1180.46 cv
1080.35 1153.96 1179.77 1064.56 1202.42 1051.3 cv
1206.89 1048.69 1211.88 1046.21 1216.99 1046.95 cv
1220.79 1047.51 1223.54 1048.92 1225.39 1051.01 cv
f
1100.05 731.143 mo
1116.28 705.527 1141.5 685.732 1170.24 676.049 cv
1179.15 673.049 1190.5 671.621 1196.58 678.79 cv
1201.21 684.254 1200.57 692.333 1199.25 699.375 cv
1193.46 730.325 1179.41 759.69 1158.95 783.621 cv
1150.74 793.22 1141.26 802.131 1129.67 807.154 cv
1118.08 812.178 1104.05 812.808 1093.18 806.371 cv
1075.86 796.115 1072.25 771.238 1079.93 752.64 cv
1087.62 734.041 1103.6 720.359 1119.23 707.673 cv
1100.05 731.143 li
cp
f
655.982 1211.4 mo
673.054 1086.93 729.73 984.394 686.336 855.7 cv
683.356 846.863 679.938 837.935 679.903 828.61 cv
679.676 768.308 743.974 833.525 753.299 855.482 cv
774.82 906.158 773.559 965.762 763.567 1018.75 cv
746.976 1106.73 812.246 1169.56 884.321 1206.16 cv
921.743 1225.16 961.486 1239.05 999.069 1257.68 cv
1037.04 1276.5 1062.05 1282.04 1050.42 1324.25 cv
1036.92 1373.25 984.881 1413.4 939.748 1430.64 cv
842.15 1467.9 726.035 1428.49 676.49 1335.39 cv
653.755 1292.67 650.426 1251.93 655.982 1211.4 cv
f
683.19 1345.86 mo
689.021 1355.26 698.284 1361.14 707.479 1366.86 cv
712.098 1369.73 716.719 1372.5 721.767 1374.57 cv
726.518 1376.52 733.139 1379.23 738.192 1377.12 cv
739.14 1376.72 739.77 1375.1 738.526 1374.56 cv
734.426 1372.77 729.784 1372.69 725.53 1371.19 cv
720.137 1369.29 715.25 1366.46 710.395 1363.48 cv
701.588 1358.08 692.449 1352.7 686.812 1343.75 cv
685.378 1341.47 681.761 1343.56 683.19 1345.86 cv
cp
.980392 .776471 .729412 rgb
f
840.755 1408.24 mo
846.017 1411.61 851.119 1415.26 856.561 1418.34 cv
861.833 1421.33 867.034 1424.97 872.546 1427.46 cv
877.275 1429.6 882.725 1431.19 887.756 1432.49 cv
892.844 1433.8 898.762 1435.02 903.869 1433.34 cv
904.96 1432.98 904.956 1431.48 903.869 1431.12 cv
898.817 1429.44 893.207 1429.96 887.991 1428.6 cv
882.636 1427.2 876.716 1425.56 871.848 1422.95 cv
861.782 1417.55 852.17 1411.32 842.52 1405.22 cv
840.611 1404.02 838.867 1407.03 840.755 1408.24 cv
cp
f
722.818 1300.3 mo
722.818 626.73 li
722.818 605.177 743.081 587.706 768.077 587.706 cv
1130.14 587.706 li
1155.14 587.706 1175.4 605.177 1175.4 626.73 cv
1175.4 1300.3 li
1175.4 1321.85 1155.14 1339.32 1130.14 1339.32 cv
768.077 1339.32 li
743.081 1339.32 722.818 1321.85 722.818 1300.3 cv
1 1 1 rgb
f
1170.6 626.73 mo
1170.6 607.494 1152.45 591.845 1130.14 591.845 cv
768.077 591.845 li
745.768 591.845 727.619 607.494 727.619 626.73 cv
727.619 1300.3 li
727.619 1319.54 745.768 1335.19 768.077 1335.19 cv
1130.14 1335.19 li
1152.45 1335.19 1170.6 1319.54 1170.6 1300.3 cv
1170.6 626.73 li
718.018 1300.3 mo
718.018 626.73 li
718.018 602.929 740.475 583.566 768.077 583.566 cv
1130.14 583.566 li
1157.74 583.566 1180.2 602.929 1180.2 626.73 cv
1180.2 1300.3 li
1180.2 1324.1 1157.74 1343.46 1130.14 1343.46 cv
768.077 1343.46 li
740.475 1343.46 718.018 1324.1 718.018 1300.3 cv
.439216 .435294 .435294 rgb
f
1116.09 1269.95 mo
776.455 1269.95 li
758.183 1269.95 743.372 1255.14 743.372 1236.87 cv
743.372 645.931 li
743.372 627.659 758.183 612.848 776.455 612.848 cv
1116.09 612.848 li
1134.36 612.848 1149.17 627.659 1149.17 645.931 cv
1149.17 1236.87 li
1149.17 1255.14 1134.36 1269.95 1116.09 1269.95 cv
.207843 .835294 .937255 rgb
f
1085.04 1005.43 mo
1079.22 1005.16 1073.42 1005.05 1067.99 1004.6 cv
1043.04 1002.5 1018.08 1005.36 993.116 1005.36 cv
961.33 1005.36 929.542 1005.36 897.756 1005.36 cv
870.068 1005.36 847.623 985.966 847.623 962.049 cv
847.623 913.261 li
847.623 889.344 870.068 869.955 897.756 869.955 cv
1085.31 869.955 li
1113 869.955 1135.44 889.344 1135.44 913.263 cv
1135.44 947.908 1135.3 982.19 1133.47 1016.81 cv
1133.39 1018.42 1133.17 1020.25 1131.67 1021.21 cv
1128.87 1022.97 1125.4 1020.07 1123.22 1017.75 cv
1113.8 1007.69 1099.36 1006.09 1085.04 1005.43 cv
cp
.333333 .596078 .709804 rgb
f
815.899 1083.99 mo
821.719 1083.73 827.518 1083.62 832.949 1083.16 cv
857.895 1081.07 882.863 1083.92 907.822 1083.92 cv
939.608 1083.92 971.396 1083.92 1003.18 1083.92 cv
1030.87 1083.92 1053.32 1064.53 1053.32 1040.61 cv
1053.32 991.827 li
1053.32 967.91 1030.87 948.52 1003.18 948.52 cv
815.629 948.52 li
787.941 948.52 765.496 967.91 765.496 991.829 cv
765.496 1026.47 765.639 1060.76 767.464 1095.38 cv
767.549 1096.99 767.765 1098.82 769.27 1099.77 cv
772.07 1101.54 775.536 1098.64 777.718 1096.31 cv
787.135 1086.26 801.581 1084.65 815.899 1083.99 cv
1 1 1 rgb
f
1107.3 1159.48 mo
1104.92 1159.48 1101.84 1158.48 1098.46 1154.87 cv
1092.59 1148.61 1082.87 1147.66 1073.41 1147.23 cv
1072.1 1147.17 1070.8 1147.12 1069.5 1147.07 cv
1066.48 1146.95 1063.36 1146.84 1060.39 1146.58 cv
1055.56 1146.18 1050.67 1146.03 1045.77 1146.03 cv
1038.97 1146.03 1032.14 1146.32 1025.45 1146.6 cv
1018.64 1146.88 1011.61 1147.18 1004.63 1147.18 cv
932.995 1147.18 li
909.463 1147.18 890.318 1130.64 890.318 1110.31 cv
890.318 1083.55 li
893.664 1083.68 897.009 1083.78 900.355 1083.84 cv
900.355 1110.31 li
900.355 1125.86 914.997 1138.51 932.995 1138.51 cv
1004.63 1138.51 li
1011.37 1138.51 1018.28 1138.22 1024.96 1137.94 cv
1031.79 1137.65 1038.76 1137.36 1045.77 1137.36 cv
1050.95 1137.36 1056.16 1137.52 1061.36 1137.96 cv
1064.07 1138.18 1066.92 1138.29 1069.94 1138.41 cv
1071.27 1138.46 1072.61 1138.51 1073.94 1138.57 cv
1073.95 1138.57 li
1084.68 1139.06 1096.76 1140.28 1105.2 1148.35 cv
1106.42 1123.51 1106.52 1098.84 1106.52 1073.66 cv
1106.52 1058.12 1091.88 1045.47 1073.88 1045.47 cv
1053 1045.47 li
1053.21 1043.87 1053.32 1042.26 1053.32 1040.61 cv
1053.32 1036.8 li
1073.88 1036.8 li
1097.41 1036.8 1116.56 1053.33 1116.56 1073.66 cv
1116.56 1099.92 1116.45 1125.65 1115.08 1151.65 cv
1115 1153.02 1114.83 1156.25 1111.67 1158.25 cv
1110.97 1158.69 1109.42 1159.48 1107.3 1159.48 cv
.694118 .937255 .976471 rgb
f
900.355 1083.84 mo
897.009 1083.78 893.664 1083.68 890.318 1083.55 cv
890.318 1073.66 li
890.318 1053.33 909.463 1036.8 932.995 1036.8 cv
1053.32 1036.8 li
1053.32 1040.61 li
1053.32 1042.26 1053.21 1043.87 1053 1045.47 cv
932.995 1045.47 li
914.997 1045.47 900.355 1058.12 900.355 1073.66 cv
900.355 1083.84 li
1 1 1 rgb
f
1091.67 909.278 mo
895.226 909.278 li
892.972 909.278 891.144 907.45 891.144 905.195 cv
891.144 902.941 892.972 901.113 895.226 901.113 cv
1091.67 901.113 li
1093.93 901.113 1095.76 902.941 1095.76 905.195 cv
1095.76 907.45 1093.93 909.278 1091.67 909.278 cv
cp
f
1091.67 930.708 mo
895.226 930.708 li
892.972 930.708 891.144 928.879 891.144 926.625 cv
891.144 924.37 892.972 922.542 895.226 922.542 cv
1091.67 922.542 li
1093.93 922.542 1095.76 924.37 1095.76 926.625 cv
1095.76 928.879 1093.93 930.708 1091.67 930.708 cv
cp
f
1106.61 1170.82 mo
787.415 1170.82 li
771.489 1170.82 758.578 1183.73 758.578 1199.66 cv
758.578 1223.63 li
758.578 1239.55 771.489 1252.46 787.415 1252.46 cv
1106.61 1252.46 li
1122.53 1252.46 1135.44 1239.55 1135.44 1223.63 cv
1135.44 1199.66 li
1135.44 1183.73 1122.53 1170.82 1106.61 1170.82 cv
f
789.542 1222.39 mo
783.605 1222.39 778.794 1217.58 778.794 1211.64 cv
778.794 1205.7 783.605 1200.89 789.542 1200.89 cv
795.478 1200.89 800.291 1205.7 800.291 1211.64 cv
800.291 1217.58 795.478 1222.39 789.542 1222.39 cv
.709804 .866667 .917647 rgb
f
820.413 1222.39 mo
814.477 1222.39 809.665 1217.58 809.665 1211.64 cv
809.665 1205.7 814.477 1200.89 820.413 1200.89 cv
826.349 1200.89 831.162 1205.7 831.162 1211.64 cv
831.162 1217.58 826.349 1222.39 820.413 1222.39 cv
f
851.285 1222.39 mo
845.348 1222.39 840.536 1217.58 840.536 1211.64 cv
840.536 1205.7 845.348 1200.89 851.285 1200.89 cv
857.221 1200.89 862.033 1205.7 862.033 1211.64 cv
862.033 1217.58 857.221 1222.39 851.285 1222.39 cv
f
1158.09 513.773 mo
1158.68 516.461 1162.01 518.896 1163.48 521.344 cv
1165.4 524.544 1168.31 526.834 1172.15 527.11 cv
1176.21 527.402 1180.2 525.538 1183.25 522.829 cv
1186.29 520.12 1188.5 516.622 1190.53 513.09 cv
1193.23 508.383 1195.77 502.647 1200.12 499.244 cv
1203.09 496.917 1206.51 495.74 1209.77 493.956 cv
1213.24 492.052 1216.65 489.832 1220.12 487.85 cv
1222.8 486.313 1225.62 485.006 1228.34 483.54 cv
1232.66 481.213 1237.11 478.818 1240.91 475.692 cv
1241.95 474.835 1243.59 473.598 1243.9 472.185 cv
1244.55 469.278 1239.32 470.143 1237.74 470.487 cv
1239.84 469.388 1241.96 468.301 1244.05 467.189 cv
1245.34 466.511 1247.18 465.343 1247.12 463.653 cv
1246.99 460.048 1241.36 462.076 1239.64 462.786 cv
1240.8 462.304 1243.58 460.928 1245.25 459.284 cv
1246.28 458.277 1246.89 457.17 1246.47 456.108 cv
1245.47 453.602 1240.21 455.034 1238.46 455.616 cv
1236.79 456.175 1235.14 456.883 1233.38 457.047 cv
1234.88 456.337 1239.32 453.963 1237.06 451.866 cv
1236.4 451.257 1235.41 451.227 1234.51 451.267 cv
1225.22 451.683 1215.5 455.991 1206.99 459.488 cv
1204.11 460.672 1201.07 461.774 1198.28 462.853 cv
1195.63 463.876 1190.2 467.484 1190.45 461.593 cv
1190.61 457.848 1195.25 452.449 1196.62 448.764 cv
1197.18 447.28 1197.68 445.654 1197.22 444.137 cv
1196.76 442.62 1194.94 441.433 1193.56 442.205 cv
1192.83 442.614 1192.43 443.422 1192.05 444.172 cv
1186.94 454.321 1176.49 459.539 1173.53 470.88 cv
1171.98 476.829 1170.97 482.562 1168.42 488.14 cv
1165.39 494.77 1162.37 501.399 1159.34 508.028 cv
1158.51 509.844 1157.66 511.823 1158.09 513.773 cv
cp
.94902 .611765 .490196 rgb
f
1193.48 467.021 mo
1196.06 472.879 1191.75 479.819 1187.33 483.476 cv
1186.7 483.994 1187.59 484.865 1188.22 484.364 cv
1193.17 480.374 1197.3 472.82 1194.34 466.514 cv
1194.07 465.924 1193.22 466.438 1193.48 467.021 cv
cp
.929412 .419608 .305882 rgb
f
1211.01 466.026 mo
1214.78 465.216 1218.45 462.576 1222.05 461.184 cv
1225.65 459.785 1229.32 458.641 1233 457.461 cv
1233.38 457.342 1233.23 456.786 1232.84 456.873 cv
1229.08 457.729 1225.43 458.955 1221.83 460.39 cv
1218.19 461.842 1214.64 464.503 1210.83 465.369 cv
1210.4 465.466 1210.58 466.119 1211.01 466.026 cv
cp
f
1216.32 470.906 mo
1224.23 467.988 1231.87 464.682 1240.12 462.781 cv
1240.44 462.706 1240.3 462.24 1239.98 462.288 cv
1231.71 463.543 1223.94 467.41 1216.15 470.283 cv
1215.76 470.425 1215.93 471.05 1216.32 470.906 cv
cp
f
1221.84 477.486 mo
1226.76 475.078 1231.86 473.03 1236.92 470.914 cv
1237.36 470.729 1237.16 469.999 1236.71 470.187 cv
1231.6 472.343 1226.47 474.402 1221.52 476.929 cv
1221.14 477.118 1221.47 477.668 1221.84 477.486 cv
cp
f
1081.13 537.748 mo
1083.07 544.898 1085.72 551.856 1089.58 558.507 cv
1091.16 561.221 1093.16 564.086 1096.21 564.804 cv
1099.38 565.548 1102.54 563.72 1105.2 561.833 cv
1115.53 554.486 1120.35 541.62 1127.74 531.39 cv
1135.14 521.139 1150.13 493.917 1164.02 501.19 cv
1171.87 505.298 1179.72 509.405 1187.56 513.513 cv
1190.25 514.916 1193.16 516.584 1194.11 519.458 cv
1194.97 522.044 1193.96 524.841 1192.94 527.365 cv
1184.69 547.716 1173.8 566.226 1162.57 584.958 cv
1152.04 602.515 1139.09 618.624 1124.14 632.612 cv
1109.94 645.907 1090.04 657.916 1071.99 650.634 cv
1051.51 642.368 1047.36 615.691 1046.34 593.624 cv
1044.47 553.055 1042.76 512.479 1041.22 471.895 cv
1040.87 462.641 1039.92 453.355 1038.28 444.287 cv
1037.29 438.832 1037.6 431.895 1038.44 426.457 cv
1039.92 416.889 1054.27 431.236 1056.65 434.668 cv
1066.9 449.431 1069.43 468.21 1072.64 485.474 cv
1075.89 502.953 1076.54 520.883 1081.13 537.748 cv
cp
1 1 1 rgb
f
978.826 374.823 mo
952.931 373.281 942.41 357.786 942.105 327.936 cv
941.984 316.004 942.298 303.88 945.854 292.49 cv
949.668 280.272 958.98 272.521 964.715 261.787 cv
971.226 249.601 972.086 234.374 988.765 232.194 cv
998.334 230.943 1026.66 237.186 1026.52 249.185 cv
1026.49 251.995 1025.19 254.699 1025.32 257.506 cv
1025.65 265.022 1034.88 268.175 1040.04 273.66 cv
1048.42 282.583 1039.58 292.779 1041.33 302.776 cv
1042.24 307.978 1046.54 310.61 1047.82 315.5 cv
1049.85 323.24 1047.53 331.61 1049.66 339.445 cv
1056.68 365.242 1049.9 364.624 1026.12 376.352 cv
1022.09 378.342 1017.64 380.387 1013.25 379.353 cv
1008.79 378.298 1005.47 373.022 1001.32 372.302 cv
995.492 371.292 995.714 374.253 990.632 374.65 cv
986.385 374.98 982.455 375.039 978.826 374.823 cv
cp
.152941 .172549 .301961 rgb
f
1021.43 267.265 mo
1021.07 268.391 1020.61 269.501 1020.04 270.591 cv
1012.26 285.46 994.183 286.632 979.251 283.851 cv
976.199 283.274 973.169 282.57 970.102 282.082 cv
967.433 281.657 964.422 280.973 961.837 281.92 cv
956.962 283.707 952.595 286.966 949.45 291.2 cv
938.787 305.552 945.464 332.935 939.714 349.739 cv
936.936 357.858 931.53 365.471 923.683 368.944 cv
915.835 372.417 905.45 370.706 900.51 363.689 cv
892.902 352.885 872.987 349.869 864.625 336.215 cv
856.074 322.252 860.148 311.445 873.539 302.075 cv
877.882 299.036 882.357 295.427 883.723 290.305 cv
885.118 285.079 882.935 279.666 881.819 274.374 cv
880.704 269.082 881.251 262.463 885.976 259.83 cv
890.715 257.189 897.049 260.087 901.908 257.671 cv
910.78 253.258 905.586 237.639 913.248 231.353 cv
918.387 227.136 926.078 229.658 932.603 228.384 cv
938.974 227.14 943.926 222.316 949.417 218.855 cv
964.126 209.582 984.594 210.571 998.341 221.218 cv
1010.69 230.779 1026.77 250.733 1021.43 267.265 cv
cp
f
871.225 443.031 mo
888.831 475.356 928.217 494.638 949.532 525.37 cv
961.75 542.982 978.208 561.251 999.287 560.919 cv
1019.99 560.593 1036.74 541.22 1041.75 520.53 cv
1046.37 501.488 1039.2 484.349 1040.98 465.897 cv
1042.08 454.437 1048.92 447.048 1044.25 434.781 cv
1036.21 413.701 1010.4 413.484 993.761 403.737 cv
987.055 399.806 981.063 394.104 978.149 386.744 cv
977.429 384.929 976.883 383.05 976.492 381.114 cv
975.533 376.411 975.468 371.389 975.939 366.196 cv
977.109 353.258 981.6 339.258 983.916 326.521 cv
984.695 322.236 985.226 318.089 985.302 314.178 cv
985.311 313.712 985.308 313.247 985.295 312.781 cv
985.114 306.365 983.161 299.886 980.241 294.257 cv
977.833 289.616 974.149 284.223 968.897 282.819 cv
963.203 281.297 958.068 286.254 955.825 291.215 cv
954.266 294.661 951.326 296.667 949.07 299.627 cv
947.464 301.734 946.122 304.042 945.066 306.486 cv
943.979 309 943.546 310.726 943.371 313.528 cv
942.997 319.507 942.772 325.518 941.768 331.434 cv
940.608 338.264 938.625 344.793 936.065 351.229 cv
930.999 363.971 923.238 375.812 912.565 384.132 cv
904.317 390.564 894.638 394.698 885.078 398.763 cv
875.357 402.897 866.945 404.961 864.272 416.728 cv
862.265 425.566 866.48 435.806 871.225 443.031 cv
cp
.94902 .611765 .490196 rgb
f
953.09 340.545 mo
958.798 348.413 973.371 364.229 984.14 362.357 cv
987.798 361.723 991.266 360.119 994.199 357.77 cv
1004.43 349.561 1008.92 335.002 1011.76 322.559 cv
1011.8 322.391 1011.84 322.22 1011.88 322.052 cv
1012.57 319 1013.13 315.956 1013.6 312.914 cv
1014.05 310.012 1014.39 307.113 1014.65 304.215 cv
1014.9 301.386 1015.06 298.561 1015.14 295.729 cv
1015.2 293.708 1013.8 278.536 1014.82 277.594 cv
1010.63 281.457 1005.28 283.966 999.704 284.684 cv
991.975 285.678 984.285 283.311 976.637 281.853 cv
968.99 280.395 960.517 280 953.989 284.393 cv
948.604 288.016 945.447 294.409 944.228 300.9 cv
941.503 315.413 944.581 328.82 953.09 340.545 cv
cp
f
954.611 305.13 mo
959.505 301.322 965.141 308.962 965.574 315.152 cv
966.53 328.805 946.226 318.781 952.253 308.048 cv
953 306.718 953.795 305.765 954.611 305.13 cv
cp
.929412 .419608 .305882 rgb
f
1006.58 317.042 mo
1007.53 320.974 1009.63 322.32 1011.88 322.052 cv
1012.57 319 1013.13 315.956 1013.6 312.914 cv
1014.05 310.012 1014.39 307.113 1014.65 304.215 cv
1014.42 304.101 1014.19 304.009 1013.96 303.928 cv
1008.17 301.92 1005.12 311.021 1006.58 317.042 cv
cp
f
976.322 287.6 mo
976.548 286.644 975.992 285.584 975.011 285.126 cv
974.026 284.667 972.877 284.775 971.81 284.975 cv
970.228 285.27 968.679 285.747 967.205 286.392 cv
966.375 286.755 965.538 287.197 965.007 287.93 cv
962.137 291.897 969.942 289.86 971.281 289.625 cv
972.59 289.395 974.831 289.529 975.833 288.484 cv
976.089 288.217 976.248 287.914 976.322 287.6 cv
cp
.152941 .172549 .301961 rgb
f
975.545 299.566 mo
975.144 300.726 974.359 301.75 973.322 302.374 cv
972.14 303.084 971.283 302.749 970.458 301.697 cv
969.857 300.93 969.512 299.943 969.449 298.959 cv
969.315 296.845 970.359 294.8 972.284 293.957 cv
973.296 293.514 974.055 294.824 973.46 295.645 cv
973.339 295.807 li
973.924 295.685 974.533 295.741 975.06 296.06 cv
976.188 296.741 975.921 298.478 975.545 299.566 cv
cp
.160784 .160784 .329412 rgb
f
1007.6 297.961 mo
1007.44 297.851 li
1006.93 297.541 1006.28 297.493 1005.71 297.518 cv
1005.84 296.934 1005.59 296.283 1005.02 296.055 cv
1002.91 295.206 1001.74 299.35 1001.83 300.751 cv
1001.89 301.734 1002.24 302.721 1002.84 303.488 cv
1003.67 304.54 1004.52 304.875 1005.71 304.165 cv
1006.74 303.541 1007.53 302.518 1007.93 301.358 cv
1008.29 300.324 1008.54 298.705 1007.6 297.961 cv
cp
f
996.217 317.071 mo
996.038 317.051 995.859 317.082 995.704 317.178 cv
994.952 317.644 996.143 319.219 996.226 319.863 cv
996.377 321.044 996.083 322.541 995.709 323.659 cv
994.825 326.314 992.754 327.433 990.115 326.228 cv
989.318 325.864 988.402 325.256 987.66 325.721 cv
987.252 325.977 987.073 326.505 987.135 326.981 cv
987.197 327.457 987.464 327.886 987.785 328.244 cv
989.041 329.649 990.929 330.147 992.737 329.682 cv
998.368 328.229 999.021 323.387 997.488 318.544 cv
997.357 318.13 997.203 317.704 996.893 317.399 cv
996.713 317.222 996.465 317.098 996.217 317.071 cv
cp
.929412 .419608 .305882 rgb
f
994.737 339.48 mo
991.613 341.287 988.688 341.809 985.194 341.012 cv
983.45 340.613 979.458 340.239 978.709 338.237 cv
978.498 337.67 979.004 336.926 979.627 337.093 cv
980.396 337.3 981.072 337.792 981.825 338.075 cv
982.902 338.479 984.03 338.749 985.144 339.025 cv
988.276 339.803 990.834 339.662 993.733 338.046 cv
994.692 337.511 995.709 338.917 994.737 339.48 cv
cp
.160784 .160784 .329412 rgb
f
977.848 335.556 mo
977.35 335.566 976.833 335.611 976.43 335.911 cv
975.337 336.731 976.109 338.868 976.695 339.701 cv
979.563 343.777 984.381 345.358 989.108 344.102 cv
991.792 343.389 995.133 341.396 996.687 338.946 cv
997.954 336.949 997.12 335.303 994.601 335.336 cv
989.068 335.408 983.536 335.48 978.003 335.553 cv
977.848 335.556 li
cp
1 1 1 rgb
f
871.069 638.474 mo
873.515 628.099 875.152 617.474 876.065 606.813 cv
876.184 606.75 876.304 606.698 876.421 606.629 cv
880.847 604.041 883.106 597.384 880.023 592.89 cv
879.291 591.823 878.666 590.679 878.125 589.481 cv
879.424 579.589 880.521 569.674 881.163 559.71 cv
881.513 554.275 879.314 549.261 875.767 545.429 cv
878.128 501.928 869.08 458.408 861.756 415.753 cv
861.328 413.259 860.151 410.947 858.578 408.89 cv
868.472 402.019 887.973 394.7 899.241 401.587 cv
905.864 405.635 910.319 412.33 914.997 418.523 cv
923.859 430.258 934.553 441.092 947.953 447.15 cv
967.635 456.049 1001.05 451.517 1002.83 424.541 cv
1003.1 420.358 1002.55 416.169 1002.04 412.007 cv
1001.73 409.459 1001.77 406.244 1004.08 405.105 cv
1005.9 404.202 1008.08 405.236 1009.71 406.459 cv
1014.63 410.161 1020.81 410.728 1026.06 413.962 cv
1031.13 417.081 1035.31 421.456 1038.79 426.244 cv
1045.53 435.529 1049.77 446.524 1052.99 457.459 cv
1057.22 471.797 1061.63 488.787 1061.23 503.777 cv
1060.78 520.594 1056.62 538.213 1053.91 554.801 cv
1050.62 574.939 1046.87 595.001 1042.66 614.967 cv
1038.82 633.172 1036.89 653.65 1026.97 669.514 cv
1013.84 690.496 996.259 704.468 965.612 703.13 cv
925.886 701.396 889.883 677.565 857.631 656.552 cv
856.354 655.719 855.008 654.863 853.616 653.986 cv
861.714 652.607 869.096 646.84 871.069 638.474 cv
cp
.929412 .419608 .305882 rgb
f
939.204 857.957 mo
935.304 820.943 935.253 783.523 939.106 746.505 cv
941.944 719.237 943.189 681.729 959.073 659.019 cv
981.204 627.378 1013.81 641.029 1027.91 673.291 cv
1036.35 692.604 1036.64 714.355 1036.76 735.432 cv
1036.99 776.071 1038.02 817.011 1038.39 857.957 cv
939.204 857.957 li
cp
.866667 .545098 .447059 rgb
f
853.612 857.957 mo
855.341 823.498 854.38 788.622 864.859 755.35 cv
873.396 728.242 908.202 682.107 939.19 684.719 cv
957.684 686.277 972.089 702.883 977.087 720.756 cv
991.483 772.242 975.877 809.616 960.338 857.957 cv
853.612 857.957 li
cp
.94902 .611765 .490196 rgb
f
810.679 857.957 mo
810.72 856.768 810.755 855.579 810.801 854.39 cv
812.71 805.392 815.692 756.437 819.748 707.569 cv
819.748 707.947 861.938 709.94 865.792 710.157 cv
897.114 711.917 928.437 713.677 959.76 715.437 cv
975.421 716.317 991.083 717.202 1006.74 718.078 cv
1013.44 718.452 1019.35 719.431 1026.11 719.072 cv
1033.83 718.662 1041.54 718.252 1049.26 717.842 cv
1050.38 717.782 1051.68 717.793 1052.41 718.655 cv
1052.91 719.251 1052.97 720.086 1053.02 720.862 cv
1054.26 741.976 1055.36 763.025 1055.87 784.239 cv
1056.45 808.807 1056.76 833.381 1056.81 857.957 cv
810.679 857.957 li
cp
.333333 .596078 .709804 rgb
f
815.108 699.174 mo
817.929 697.287 820.236 694.748 822.299 691.814 cv
830.39 680.307 837.661 668.247 844 655.688 cv
855.396 633.109 864.226 609.197 870.583 584.729 cv
875.828 564.54 879.417 544.005 882.299 523.366 cv
888.903 545.65 903.692 562.07 929.404 564.547 cv
957.115 567.209 983.893 557.452 1011.52 558.292 cv
1025.83 558.717 1039.3 550.232 1046.54 537.698 cv
1050.04 531.644 1050.82 523.725 1051.38 516.873 cv
1051.74 512.439 1051.85 507.986 1051.71 503.544 cv
1051.63 500.947 1050.22 497.147 1050.62 494.731 cv
1050.76 493.869 1051.52 493.049 1052.36 493.173 cv
1053.25 493.306 1053.7 494.332 1053.97 495.221 cv
1062.93 524.472 1050.13 557.566 1047.38 587.051 cv
1044.97 612.993 1047.25 639.022 1048.98 664.928 cv
1049.87 678.21 1050.63 691.515 1050.52 704.832 cv
1050.47 711.327 1050.22 717.821 1049.68 724.294 cv
1049 732.451 1049.07 734.162 1040.99 736.402 cv
1024.99 740.838 1000.72 742.419 992.677 743.489 cv
968.573 746.693 944.122 747.259 919.892 745.223 cv
907.09 744.147 812.477 731.586 813.586 716.309 cv
814 710.604 814.504 704.887 815.108 699.174 cv
cp
.839216 .313726 .231373 rgb
f
835.592 595.173 mo
832.412 594.537 829.418 592.988 826.184 592.646 cv
824.429 592.459 823.035 592.968 821.391 593.5 cv
820.193 593.889 818.968 594.159 817.792 593.604 cv
817.164 593.307 817.345 592.375 818.054 592.38 cv
821.021 592.405 823.57 590.786 826.589 591.172 cv
829.732 591.575 832.619 593.05 835.712 593.669 cv
836.627 593.853 836.517 595.359 835.592 595.173 cv
cp
.937255 .780392 .713726 rgb
f
921.266 857.957 mo
795.606 857.957 li
796.864 839.758 798.207 821.586 799.247 803.496 cv
801.922 756.959 801.272 710.642 820.563 667.278 cv
833.084 639.132 853.495 614.398 861.376 584.618 cv
869.578 553.627 863.268 520.843 856.464 489.516 cv
852.688 472.133 852.273 455.574 850.177 437.987 cv
849.164 429.48 849.133 420.435 853.13 412.857 cv
856.804 405.894 861.157 404.636 867.635 401.379 cv
874.903 397.726 882.313 394.275 890.122 391.93 cv
897.347 389.76 899.386 394.343 902.379 399.794 cv
904.729 404.073 906.313 408.699 908.375 413.11 cv
924.794 448.224 933.07 486.741 936.376 525.214 cv
940.488 573.074 937.141 621.225 933.792 669.144 cv
932.808 683.233 926.686 778.561 921.266 857.957 cv
cp
1 1 1 rgb
f
1059.99 532.352 mo
1058.5 538.895 1056.7 545.355 1054.98 552.248 cv
1048.41 578.552 1045.41 605.746 1046.11 632.849 cv
1047.11 671.305 1055.45 709.037 1058.84 747.273 cv
1060.4 764.932 1062.84 781.905 1063.36 799.728 cv
1063.93 819.2 1063.95 838.684 1063.54 858.16 cv
1050.31 857.708 1036.99 857.957 1023.72 857.957 cv
1026.01 788.532 1033.11 718.966 1033.11 649.824 cv
1034.4 596.813 1035.43 543.122 1025.66 490.764 cv
1022.65 474.698 1018.16 458.896 1012.91 443.428 cv
1010.39 436.027 1007.71 428.65 1004.46 421.539 cv
1002.49 417.229 1000.09 413.117 997.337 409.258 cv
995.947 407.309 994.476 405.405 992.899 403.603 cv
992.417 403.051 989.118 400.772 991.463 400.683 cv
992.371 400.648 993.286 400.924 994.177 401.06 cv
996.807 401.46 999.396 402.1 1001.93 402.921 cv
1005.72 404.152 1009.62 405.029 1013.4 406.364 cv
1017.78 407.914 1022.08 409.683 1026.28 411.674 cv
1034.66 415.649 1042.61 420.517 1049.93 426.21 cv
1063.64 436.868 1065.67 460.013 1065.41 476.294 cv
1065.2 489.499 1064.15 502.673 1062.81 515.807 cv
1062.22 521.565 1061.21 526.986 1059.99 532.352 cv
cp
f
916.904 783.136 mo
830.438 706.443 li
830.143 706.182 830.116 705.731 830.377 705.436 cv
936.184 586.148 li
936.445 585.854 936.896 585.827 937.19 586.088 cv
1023.66 662.782 li
1023.95 663.043 1023.98 663.494 1023.72 663.788 cv
917.91 783.076 li
917.649 783.371 917.198 783.397 916.904 783.136 cv
cp
.980392 .776471 .729412 rgb
f
991.689 647.988 mo
955.693 616.061 li
955.443 615.839 955.42 615.457 955.642 615.208 cv
963.501 606.346 li
963.723 606.097 964.104 606.074 964.354 606.295 cv
1000.35 638.223 li
1000.6 638.445 1000.62 638.827 1000.4 639.076 cv
992.542 647.938 li
992.321 648.187 991.939 648.21 991.689 647.988 cv
cp
.152941 .172549 .301961 rgb
f
959.164 677.092 mo
946.692 672.682 915.842 656.906 906.333 673.397 cv
894.573 693.792 925.574 693.988 935.807 700.336 cv
942.507 704.494 948.006 710.19 954.39 714.762 cv
957.52 717.003 960.815 718.892 964.456 720.229 cv
965.91 720.762 974.175 725.758 974.728 725.36 cv
975.817 725.937 976.946 726.526 978.189 726.621 cv
979.432 726.716 980.83 726.186 981.375 725.057 cv
981.919 723.928 981.134 722.313 979.884 722.37 cv
981.855 724.509 986.077 726.624 989.166 725.677 cv
991.909 724.837 990.7 722.391 988.986 720.871 cv
990.571 722.276 992.94 723.727 994.669 722.403 cv
996.315 721.143 995.658 718.511 994.35 716.978 cv
993.042 715.444 991.202 714.217 990.651 712.272 cv
992.313 712.947 995.605 715.427 997.21 713.788 cv
998.376 712.598 997.819 709.873 997.219 708.598 cv
989.872 692.983 975.202 682.758 959.164 677.092 cv
cp
.94902 .611765 .490196 rgb
f
793.037 638.021 mo
797.938 642.662 803.595 646.525 809.194 650.338 cv
838.672 670.41 869.604 685.445 903.167 698.067 cv
907.665 699.759 912.859 701.334 917.087 699.051 cv
920.202 697.37 921.953 694.002 923.521 690.829 cv
926.965 683.863 930.41 676.897 933.854 669.931 cv
935.65 666.297 937.496 662.27 936.515 658.336 cv
935.184 653.004 929.353 650.261 924.076 648.724 cv
900.549 641.872 884.934 624.12 866.085 609.511 cv
856.092 601.766 846.587 591.615 845.354 579.027 cv
844.023 565.445 849.669 553.857 854.74 541.715 cv
870.122 504.877 874.172 461.572 871.862 421.52 cv
871.596 416.92 870.898 411.728 867.17 409.02 cv
863.929 406.665 859.292 407.082 855.789 409.027 cv
852.286 410.973 849.684 414.179 847.262 417.372 cv
832.638 436.657 818.82 459.933 808.675 481.782 cv
797.453 505.951 788.257 530.493 783.227 557.236 cv
783.083 558.008 782.938 558.785 782.799 559.563 cv
778.484 583.563 771.366 612.949 788.864 633.628 cv
790.173 635.175 791.571 636.632 793.037 638.021 cv
cp
1 1 1 rgb
f
1001.89 290.185 mo
1001.22 290.225 1000.41 290.193 1000.08 289.617 cv
999.776 289.102 1000.04 288.441 1000.39 287.957 cv
1001.6 286.276 1003.69 285.432 1005.73 285.106 cv
1007.05 284.896 1008.44 284.873 1009.7 285.328 cv
1010.96 285.783 1012.07 286.78 1012.41 288.075 cv
1012.53 288.56 1012.54 289.112 1012.25 289.522 cv
1011.74 290.249 1008.56 289.79 1007.63 289.844 cv
1005.72 289.958 1003.8 290.072 1001.89 290.185 cv
cp
.152941 .172549 .301961 rgb
f
1005.8 478.064 mo
1001.92 475.7 995.819 475.739 992.516 479.074 cv
988.055 483.577 988.788 490.363 993.378 494.498 cv
997.641 498.338 1005.16 497.647 1008.62 493.075 cv
1012.09 488.503 1010.7 481.05 1005.8 478.064 cv
cp
.980392 .776471 .729412 rgb
f
984.165 392.468 mo
986.131 394.247 987.809 396.322 989.295 398.561 cv
991.555 401.965 993.433 405.605 995.179 409.295 cv
998.788 416.922 1001.25 425.076 1002.73 433.375 cv
1005.82 450.689 1006.06 468.717 1001.13 485.716 cv
1000.54 487.746 997.368 486.883 997.959 484.841 cv
1002.75 468.31 1002.76 451.026 1000.01 434.126 cv
998.619 425.993 996.445 418.018 993.063 410.475 cv
991.765 407.58 990.087 404.739 988.428 402.036 cv
986.557 398.987 984.429 396.124 982.052 393.457 cv
981.213 392.515 980.555 391.327 979.821 390.284 cv
979.708 390.124 979.591 389.922 979.673 389.744 cv
979.803 389.46 980.23 389.574 980.498 389.735 cv
981.826 390.533 983.042 391.452 984.165 392.468 cv
cp
.0392157 .137255 .411765 rgb
f
923.657 373.544 mo
908.182 400.851 906.367 430.877 912.829 461.481 cv
913.439 464.374 909 465.61 908.387 462.706 cv
903.192 438.108 904.57 410.963 913.33 387.507 cv
915.419 381.912 917.802 373.676 923.066 370.313 cv
923.559 369.999 924.229 369.707 924.688 370.071 cv
925.232 370.503 924.919 371.37 924.567 371.969 cv
924.258 372.493 923.956 373.019 923.657 373.544 cv
cp
f
923.148 552.972 mo
907.638 559.553 895.976 548.29 893.442 533.113 cv
891.738 522.902 892.347 511.588 893.187 501.295 cv
893.906 492.463 895.431 483.209 898.279 474.79 cv
900.418 468.469 904.382 461.874 911.316 460.13 cv
917.357 458.61 922.286 463.16 925.725 467.561 cv
937.553 482.697 943.928 501.155 948.06 519.712 cv
949.993 528.394 950.851 555.016 934.961 551.271 cv
933.262 550.87 933.58 547.976 935.382 548.16 cv
943.574 548.997 945.739 539.699 946.08 533.118 cv
946.544 524.171 942.997 515.337 940.453 506.908 cv
937.584 497.399 934.052 488.541 928.72 480.124 cv
925.52 475.07 921.148 465.329 914.508 464.516 cv
905.595 463.425 902.428 476.784 900.982 483.108 cv
898.819 492.568 897.752 501.891 897.612 511.578 cv
897.474 521.125 896.403 531.423 900.574 540.333 cv
904.677 549.099 912.417 552.725 921.596 549.289 cv
923.711 548.497 925.252 552.08 923.148 552.972 cv
cp
f
931.525 554.812 mo
934.753 556.47 939.27 553.557 939.092 549.932 cv
938.913 546.307 934.132 543.852 931.082 545.819 cv
928.032 547.786 928.296 553.154 931.525 554.812 cv
cp
.980392 .776471 .729412 rgb
f
918.274 556.3 mo
921.502 557.958 926.02 555.045 925.841 551.42 cv
925.662 547.795 920.881 545.34 917.831 547.308 cv
914.781 549.274 915.045 554.643 918.274 556.3 cv
cp
f
932.905 654.176 mo
929.329 653.342 926.199 650.896 922.868 649.345 cv
918.286 647.21 913.762 645.491 909.416 642.9 cv
901.926 638.436 894.605 633.806 887.755 628.403 cv
881.375 623.37 874.987 618.499 868.754 613.258 cv
865.324 610.374 862.326 607.028 859.228 603.8 cv
856.666 601.129 854.334 597.382 851.539 595.042 cv
851.291 594.833 851.561 594.46 851.838 594.527 cv
854.311 595.127 855.554 597.412 857.303 599.132 cv
860.242 602.022 863.165 604.905 866.063 607.84 cv
872.122 613.977 879.123 619.258 886.045 624.347 cv
893.495 629.823 900.688 635.154 908.589 639.998 cv
912.358 642.308 916.174 644.106 920.21 645.906 cv
924.453 647.798 928.976 651.2 933.437 652.248 cv
934.689 652.542 934.159 654.468 932.905 654.176 cv
cp
.52549 .784314 .866667 rgb
f
1058.23 502.406 mo
1060.3 512.799 1060.59 523.803 1059.54 534.341 cv
1058.37 546.066 1054.97 557.672 1053.05 569.309 cv
1048.91 594.477 1048.01 619.61 1049.65 645.047 cv
1051.27 670.085 1054.64 694.95 1057.75 719.833 cv
1060.06 738.358 1063.16 756.846 1063.64 775.544 cv
1063.86 784.078 1063.67 792.643 1063.51 801.209 cv
1062.79 793.5 1061.99 785.799 1061.1 778.109 cv
1059.74 766.481 1058.1 754.878 1056.79 743.249 cv
1056.01 736.229 1055.12 729.222 1054.23 722.214 cv
1051.08 697.337 1047.45 672.474 1045.92 647.428 cv
1044.46 623.644 1045.01 599.99 1048.62 576.416 cv
1052.37 551.944 1060.39 528.07 1055.64 503.119 cv
1055.32 501.435 1057.89 500.708 1058.23 502.406 cv
cp
f
853.556 543.932 mo
857.296 533.166 860.915 522.367 864.738 511.62 cv
868.626 500.694 870.195 488.41 870.629 476.909 cv
870.679 475.603 872.481 475.659 872.619 476.909 cv
873.231 482.468 872.388 488.075 871.297 493.531 cv
870.064 499.698 868.963 506.275 866.823 512.195 cv
862.349 524.573 857.777 536.873 851.871 548.75 cv
852.436 547.145 852.997 545.539 853.556 543.932 cv
cp
f
991.963 712.068 mo
990.432 710.395 988.607 709.061 986.907 707.573 cv
985.801 706.604 984.771 705.298 983.299 704.899 cv
982.941 704.802 982.688 705.342 983.04 705.514 cv
984.487 706.22 985.15 707.904 986.203 709.047 cv
987.607 710.572 989.32 711.767 990.678 713.353 cv
991.435 714.236 992.756 712.935 991.963 712.068 cv
cp
.929412 .419608 .305882 rgb
f
988.748 719.65 mo
987.774 718.62 986.535 717.913 985.569 716.878 cv
984.678 715.925 983.919 714.869 982.954 713.979 cv
981.832 712.946 980.419 711.617 978.896 711.268 cv
978.684 711.219 978.523 711.536 978.74 711.637 cv
980.321 712.37 981.394 714.259 982.555 715.507 cv
983.397 716.412 984.079 717.471 984.954 718.343 cv
985.813 719.199 986.835 719.837 987.654 720.745 cv
988.32 721.484 989.435 720.376 988.748 719.65 cv
cp
f
980.037 720.875 mo
978.438 719.267 976.678 717.844 975.076 716.249 cv
974.156 715.331 972.817 713.649 971.355 713.808 cv
970.512 713.9 970.274 715.046 971.149 715.329 cv
972.551 715.781 973.458 717.067 974.517 718.016 cv
975.994 719.34 977.483 720.616 978.895 722.017 cv
979.634 722.75 980.771 721.612 980.037 720.875 cv
cp
f
972.233 357.883 mo
967.483 354.928 963.762 352.075 960.038 347.89 cv
958.349 345.991 956.701 344.104 955.077 342.149 cv
954.154 341.039 953.416 339.95 952.058 339.438 cv
951.896 339.378 951.779 339.609 951.894 339.72 cv
953.48 341.252 954.592 343.301 956.024 344.981 cv
957.675 346.92 959.442 348.768 961.117 350.687 cv
964.178 354.194 967.81 356.32 971.724 358.754 cv
972.277 359.099 972.785 358.226 972.233 357.883 cv
cp
f
1778.94 1766.75 mo
1747.22 1813.74 1661.87 1875.47 1601.43 1863.43 cv
1572.15 1857.6 1563.81 1836.02 1543.47 1819.14 cv
1520.29 1799.91 1484.18 1782.65 1454.99 1775.68 cv
1454.62 1775.6 1454.25 1775.52 1453.89 1775.43 cv
1388.23 1760.4 1326.57 1769.28 1264.36 1741.54 cv
1197.73 1711.84 1145.56 1667.34 1073.05 1657.21 cv
1065.15 1656.11 1057.01 1655.41 1048.58 1655.19 cv
1038.14 1654.91 1025.91 1654.24 1018.5 1647.86 cv
1016.81 1646.42 1015.37 1644.67 1014.27 1642.56 cv
991.312 1598.85 1088 1595.73 1107.16 1599.41 cv
1150.29 1607.67 1190.68 1629.51 1235.73 1619.1 cv
1339.2 1595.19 1222.46 1494.33 1194.51 1452 cv
1171.21 1416.71 1147.95 1381.38 1125.08 1345.8 cv
1102.2 1310.21 1079.73 1274.37 1058 1238.07 cv
1047.11 1219.87 1036.41 1201.57 1025.95 1183.13 cv
1019.23 1171.29 1011.46 1159.52 1006.16 1146.76 cv
1001.57 1135.68 997.415 1120.29 1005.24 1109.53 cv
1011.6 1100.81 1022.74 1101.58 1032.1 1104.45 cv
1044.62 1108.28 1054.19 1118.2 1063.03 1127.86 cv
1123.17 1193.52 1178.24 1266.75 1237.96 1334.21 cv
1244.51 1341.59 1251.39 1349.22 1260.56 1352.88 cv
1290.32 1364.73 1281.07 1330.9 1296.86 1320.13 cv
1318.89 1305.12 1342.57 1322.86 1369.8 1308.44 cv
1386.53 1299.58 1404.47 1288.35 1422.95 1292.51 cv
1444.27 1297.32 1464.87 1320.61 1487.28 1306.28 cv
1495.28 1301.16 1502.54 1293.97 1511.93 1292.51 cv
1525.82 1290.36 1537.97 1301.42 1547.24 1312 cv
1572.06 1340.3 1592.1 1371.61 1611.57 1403.68 cv
1629.72 1433.58 1638.41 1467.58 1655.04 1498.78 cv
1674.37 1535.02 1695.66 1570.22 1718.82 1604.15 cv
1739.17 1633.96 1777.04 1664.1 1791.17 1696.54 cv
1801.18 1719.54 1794.24 1744.08 1778.94 1766.75 cv
cp
.94902 .611765 .490196 rgb
f
1009.48 1128.82 mo
1012.06 1141.65 1020.8 1162.89 1033.71 1168.57 cv
1041.6 1172.04 1053.55 1170.67 1057.91 1162.45 cv
1068.14 1143.12 1042.6 1107.49 1021.47 1108.92 cv
1009.39 1109.74 1007.43 1118.6 1009.48 1128.82 cv
cp
.980392 .776471 .729412 rgb
f
1073.05 1657.21 mo
1065.15 1656.11 1057.01 1655.41 1048.58 1655.19 cv
1038.14 1654.91 1025.91 1654.24 1018.5 1647.86 cv
1014.55 1640.39 1026.93 1635.69 1033.12 1636.17 cv
1042.69 1636.92 1051.67 1634.01 1061.04 1637.96 cv
1065.92 1640.02 1070.34 1643.72 1072.57 1648.6 cv
1073.92 1651.56 1075.18 1655.42 1073.05 1657.21 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 23.0.2
%%Title: (974.eps)
%%CreationDate: 6/15/2020 7:31 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj9jno/QZ\ra".S*P`[-beAT8]:u5P\?>o76it1)1NUj"s(?h]3["V?N&0W*i,I"*%Q)^/<S-)mcK]/]kd;mDX-PI=MYKLp
%78`iHVL@MMIeqt%Xf`^[(M[Rk-l&$o=`iT(YLk:8P^?-4e]jRQ=m^<oL2NBLLbJQkC&(Mg)Z6?)DH0t$rq%LYV;-SbnLX^1d<%6U
%QqaFC'>bGtA=lHVb7=/r!UqmZ(SA$.BI]t:0!#H#7e"rdK7nSDBI3[pgg@!;Xj].mY%G$^!sfgk$J*Q-[B3Oq^gI`rT^UWc++5TG
%Wq>qd25b?m"Wt>W*tAnTS[G`!6[B%m&P`7um!l*T[,a(9rs@*JrrLdL:\^@JYs-I%-_F2n*/k%D:d0npT,G6CrGDZ@OX>uS$5V0(
%>?ABcff^h/qa0e-VAN/Irmh=0?*H5UOnc.'pd,rHKR(CHJ$m#D^k81Ys3T7[,JHNFWMl]-TlIDCd!ijO0utOI`R&$rPWAWmMk7)?
%QS#<I"LQ14XXuOf.]Nsa%n=\)$JAr+^>uI,;,kc.g''r'oH*Ek`$\F\hbJOCSFT$9rhJjPcJ!$6BO$\mL00`Ce2X&/R$e:;/Bou@
%O61`5-hC5c")/?3e"X1VKB[A<*3DF9Ob#X!kF&="ZrSFtq*G]Gg5LAdC6\hWMMt?:rf@`0P3ZJcs0'+RTL-,g[ebg,b]E?n,lq!?
%Ujt8!>Eu#3`*MWcf*(Sl$cG@jCA+i`0B>&/U=ZhN+Uubq#'A3q3:QtIn'q2.HHth>q!l-VHL5OLCAdQ#2W>IHV#%7DEn<!RT.@X^
%dOT\OpbmqMqMM.JL,%Vu!u"_BG2SPb61dDMpoL*]ZdkL^rLrLG>91(TE*c#XlUjf)IH1WG^mt*'r1X1_K-:h'mG<(+'DB!HBTZ-t
%bfKPm!*ha6R0kk/FQ#s.pAaHTInjdm>68M;bjM*Xft\'GocDMBL)F%l;El,*cqq@9qWO;ile`a@YB9)<&_'jXj&"/"3^=a1c"cj%
%GuE%4X_''M\lSMNb[.48.iO01N;gZ^c:mZ`aA:I;bG9h6c'"c9SYe3&]-S!KdE9%(psJ?+hRFB@hJAaj/Gd$"_?LiG!#2?]k=_lU
%G@tuCI5DW83)?jpb(MMlbq]-[1QU?SK<t2/3F1#tGfM5BM(jWJ'i5)pXn7IC,+5K8$bQ[NTr3%`JSZ7L2EIGD6="<+6ur-cKu&lK
%1KZKC`<q;_[:M1+rE-Qj!2$TUrlV\@fb]3X2^c.7n3Y4ZPZC8O68<t;nl+&InQ/Y-_2fb4N2`(g>nn(,(')?K;]19<f/:6NW\":g
%ppRM:Ln#RW:\P*g]nLfrI?*X\](/N"I+nfA\lB[RrBntZ2QTps"4L/:('puBJ[VG/N'Ws:=%r-E:0"SU`)lS]g^s+bY_8rgolJ(N
%e10:c#F'&7Bd)L?Poh'opbCMON8m;b$@g;]9@[%E<pt@MU^susD9]Da'3dr"X+?!#S0AsTLN0F4m4e`,2/Wk%r9&m$P`D1ee[M.(
%.XMcB&bp&`fBo!&c]L$6:/CW$a*ka;Tu28<9<6Z,.sI7C4>EKJGa_jdK.*e%IZBrKlVk0\_>hWWkt.rTgl5-gTAem8nRU?LAR!NP
%rsVJoXce4h_j1]rB3Q*aX`6*SjO5=&Zk+Z'4gV42=P3a/(jSG]lLI8NYRZN44G_1!=p8p/5@;3L9!.raEtc]9Mbn:'b0=N<Zj>c*
%K;B?Wgp[RN4=';0Ok_KUEZRpFgdQ6`;h67YVhWc*`,`2[oG4^e,*lHOEq:?q-.G.Y]hhc[`h2/JE/s(p;61F?^-T-d%>e5KG<E.\
%IjNsV$k,]0rEAeJX'TkF>=kfDBV^10;r$L>T,(`Z]f457rPRQ*RU3d\dd)!3V3MmYh/)u5*n[US72o:)W"-N!i5I6IVJ)=/M9!hU
%0;D_<W8.d.0ZUJJ7W=hi.G)t_@l7V]4N[,+I=0g*A7pAT?LemjgpD=O6YT&gB3(;'=stoX&/kUWW.]YR#+"DDou>+u4=2sL7&Gc^
%:KPc9dHYh=Q5?XZGF9@uP]m8ZJ$k9%qBZ7L?04!%#iPkf*bb2p"&XMB0bgLuTeYjF4mr[bmihWdI>kh4[CSA:EVn>U>=QFEeXZ"c
%bb`e[m>_=`R-9q5P6'"$_114[R@dE<=jm?lbX,g01[!U'"I`b3Zb^t(JXpWt]P+@c'U=q"?5f/d)T%&p*Y+(,FmDc0lfB+0Xt8TL
%/BQ+?`SYoH5,I%5QWsp&0TQ0hpp4R:^QRiPQ^WpJeZ>`@agq%e]F3HfglL@(MFEfVYH.4c)MXh;<V<8F1PhGPnbJ5.ZpB2>67,Li
%1GbZsoROiRNbOM9.QZqTfk46_BK\"`UCT>d]rbsm9AVUc1V["jR0O_ok"O@LIXJtsR&\bRR-crk.HnSLc!VBo:h);b`kI)rqG'i/
%H$RbLTtLAqd,7"8P(!Z+p2FV#5P"c2T4OIgJBr3MXJ]p&Fi!k8:\T5**U!(ZrfS),G[<4qLRRPJZi.BDBD@nV\TonlF+-Ek\/HBs
%_Y3hN_N^ZcnA8/2?YAm\]Rc4N[[J/1iWYa<57bErE%7'Q/$5,;(K?s<aMZ1Ec+>UW_Ct?9jQu4-^$d^fCQm1-D-\Tkpu7VRV*1.l
%BCH6Qhn+sAd)XK,P^N,_an5[I>)CJ9>5+,5RN&Zk<+%ZrAJ+Om;?,X67]36GXOi)!g7?pJDk?Z3ej\E<_k_@!hhQt$_;(tC0?F'+
%WLl%^o>%;)dqF',BHpp6g.Q1N(ZS7FW\mS0_hOWr.NZ+*CNqS5`q44HoKST_*ju2N5Z]['.LQW)=t"[Cf.P"3a\N3QT;"7G5:n.'
%XedKgCB)J7?H-'.HGF=s3\@/-*ikI)R]^ufh:8F%*BZkm`QPYh(=]_<0NAaAHOuuF7Dj>"HBB?UFBVeSN0Y9Eb2ls92k^:e#UpSZ
%<$MdIV):CfH0][Vi#>qF(6TGu-o2I.Q+p6DMAKgc-%.MgPpi64@FbVBRoc>3j&ZGN^JcS=QeTXu[4'MMS9n\UGqhI'?AmgZ[@EFa
%'MhC[qm@j0_B11UVcjcfa=M('(:>RjL:-iC[4(ZsTGGM1&t+$Q^8OJg<KDH'M_[*bc-p"C\u:,1>*ST%W^ZH0be-LFY<8YLa-moB
%HhdiI1!RD%n&t;b<Hp*=@fA!XR%KB5XfIiO$GP9nKdh$ibk!L5&C%!KnriNIh"3Dq$d69?bEotgbKN;VI7:=G$bb\R":MoOcta$&
%2A^ZkD*lF_?2IsrRYmTGctWrjp>=G9$YSj23GT#)[a8dhBs$M]&UL%cq=^nP_ug>Fl&k=;*<7_1kj)\'0#Yg5#o7!W&>LD?i@,l;
%Tc2<FqSH/sU'l-JhA@Yr]_7\lkB5n,o.PP2E%2.llS%1b8,]?n.V_t!NIP$k:aK(F<OsVT2ZpQtVmZQ^kWY>OGSeM8g2[*F6KtlI
%.[89,S#_HD9XSSn]h)_j/jc8FW//De-r\"JpYUWZ*N&GU;24Yh4T)%'n8B")_geHNKCAOsj"e:Rj=<1'baN>>^#&#J0*Jl8WR(80
%U@GcCiqJ2QJ$Fr^9&\0IrQJj8+-H:G0se$Tb=8gTF<D&Xl]'@ls%o=^;\:;PfZg6.n<!!PN6@U!2ZnW.k&u'd@9a\s&.\&Cj5<@5
%25[=T]^X@ZZb7M%\EVtFQs-uU<4cHfa;eARcS#7AgW$E7Q+=2_^Zk=.DdapSnK?hLHTO1*5`7#g(?`I(GQ.JtYN/oXs3@Xu?(CpI
%c@6Yn^V9riDttT9`VJuCLb-i$([&P?n/h*&R%^5q4it[2mu/TDAisG+3:gFGq(Bs?^[)\[n-QI:[F\9>7LQlmQ5:Thf4/PZO&s.H
%GeE6g#^TZVrD7Xmq"&RVFKJU4!^N]Cf8=miDR@=2]ESnH]Ot9]$hV#K_r*>Rqe"[4g>`'jN07h4^AARQM[\8_6T1e=OU#*u8<YXR
%AA?r3>eDb6OXBt7dBYn2B['N,<YW272%#(?Wu9;L1db?V;,aSb%9$u#4kF$$c_b^DNe_GJWl$cVq'HpEe?kk/!@R!,f'IP"^%$,6
%[ec(a:=H!qP).2QP;1VAP`unrjD8aI0%h;1d5T?6d#6u&9ICoCD7'f'gAGe`%SZ,+ecXOWR"$7kqnC6IMj;!0oNuHSo=fn9TZ\PL
%Z:MVZ&hf0]b9HJ^8A$Jd08mclVe-ao/6:cLcGG\@b9HI3_\))Vna_s`bOjSImo/C*1C9k/*Uq9q#3hU`2">u8V>X;TAW\a:VIl:c
%b9jl,E\QgG9mF50@+I!#n:JR;ZAF&S_=V"dS+'`m2uD1r2nmFE9"oU1Y@qG;m0hr6_[:83NT9"FVM0"p(rou&DU#hFoPRLf`\oGe
%@/=1g0R[A:(Ul%LDI8hJS&Ve\Kt:/:r`m+3k.bq.dJ%r:ho"8RMl6,Y`[.#La4WVg.'bU'lO6dTr&$Xgnq)LL\#g:9fbTX:f3UqS
%g/5I1%Am>!W06=<k0F<ns2>i5n*KK:$jL<\B>3]TZ54,,2ic6#f?!rN#]2U/I?%M0*3h`9MPjW>)fAj#KP93E10ts?.JetZORV8?
%:XO0[=YFSk=1o=\3e3,N`XG6:_BP$q7kr9Dk:rcNON6jB_]k-rZ]X[gao!?DZ,gG!g<M8?(lLMr*9AodMPo1.72FoFS26L]ETtZ2
%*_S,-[;L7pRV!s/6b&kfH[8)(#^T[q;.1!%VNd=*RPE@%T%YZ@nYSh7VhJ@.6alVkh;6WG2:'ENjUY/Rk6@Ln;H6YH-0V7]k2iiW
%X5Bh23Q'/odk,H^T&5H\]]dP=Bf*M*GQKcd9K]u4Uhb2e3+I8:I)F^%]NEq-AP!tO[^[mQQQicG.quX)r<Ma_RU5RJ/(Y"(Y/F,@
%B9mj)B]/\[$8-3\nWHh<io=gG_Lsp@eUHm/Y=52XF7+isT*G_eH/,aLMfe4-'n&s:W9DD4.PkE%jTU?@0DP+V;ZE#6YA^"jVnR()
%^'jZ$)l;RX'HYM)2ST&kbju?cn^I,+(U;a>QCGU'>=<OjBF^dt%jl`;bq5[#75VK0jqcA">XriV/m29ZF0cG%H.](+$g)nVC"4Dt
%>D.'UE,H95rC=c9CW!+#9Z;o<04MKFLunDM'[)3oD\10=6XnX,3DXJa?]!s[gIho:`!)&,)5\LiH$k-k:0n#]p\.92m`/Sf.kuhR
%8k]i-n"[OEblo!68XS`Re6-]<O-Fa_gkbg.-DR]-[I0*3VhArcqa:+@8[IBQ`HNA1`'-,#j:S#0&YfaihHW\#\'&[g]o-f@50<%h
%?l%V8'X_,">l'oe?Fk!fhj<Nb6505RPY%W=hWO8P8f6qM/V`lp#-(!mn`8g@5u.lh5O4nY,1,`/SVJQV7Q5@_*N"O_LPiB4c`AU-
%ea'XQK.d;YItWR>f@%s(?1Ruhh/@biM;[>j*`[u6*n/"ZfVt8=eq6"\IVR-!Virk@Ea&5L,s?rDH%)+WPgYAKORmXi[.QKs6Bja\
%2M-#7bq2&1KkE).?2LIBo$35=i$!p?,Q<B6l$\ntiTJ&@pK*j`X)55n0-N==Z>b[::=4!%MAAD'04.8dQJoAtMS<@'s19!oJ&uP0
%3'iI5pM]]b)WP5\Rt3iR@P88;87UEY91(\CZ]0SRXjrf5ddi"-\GD(+*4Y7lTU8olhGcYO^gO;rV"]Q1ls%O!<eRPih7TJA%3ZP-
%EJ>4^X;aY_#(G-_UDFmc`c5E,s/g6Ujpe,1K<h_@o5>T20n[,`g#/qm4hjL2bg1b9elBp?7sqLAE.@0mM8&TSZCbG11RBKRMg)le
%/ggGh\BROss*XI\C&*/&a@@oMfE[oOV(qS=lMu6T-<,!0UB56]0V!n+C$%u[ON2WA-6Y;%C>sS#I,FUSO5Kt*gb`SUmdJ4&I>:HN
%66="#RD1'.pLTbiK$N&aoK;IsV14LYRJ:s5Fao2(k2;3Z$dSCgWrtOW^^Vdm[S*+)`BhTcm*3b\)XZYRk]>ua]/RmMdtI<>7<@oo
%IlE(0;cV)$B)\Z<c9*-TGEn>Xh>M(<BI^MG4qF'0K(,&W>j;mmPdO)[f.(.OV&K/)9GSClPjc5jfti9bVTi`FpK(s`W>:8N&-j9`
%/t,D5;t]].Kc/tIDjU=qnq.-&TCquJj#Ip)['`KSoqWD'O,nI>Pe=tXI1bH9?%-(D=T4m)bMT[Y0>7R'24gYDkB*ca]F9Y(n_!J]
%C:*Oc$FsXpA@Er9RauNZo"Y2dD3Nj&laOO`K>2'[I6Xs/Gf;)1^4b2*e9r]:9<"nfn'%lK)F+,HBDn8uFBtqMp<Npp)MYs8Is^;R
%#=!,3Hsq@fJAgqtIKO=peqY*$>@G=MK46e^9i9tYr.hP7T76b0Aa?h8fe)-9i#NBLj-K4JMgRm[gpdT4:dD'E!p?'TQOo92B[*ug
%3^Aqu%0,rm[d]n."^<V;:KZ[[SqgE%/9%?%1\cN`=^H[j'$\K[%j,JR'q+"k'JE%:mj=(ToZP$fIc.[[q"+o1Ifb%G-bfIJb#eB\
%r-3c:!`N0.Kqq<\g"=Qq1/c2IlfU[Z/%XI%WYTdR&u$W"Zq/)d_P/;H!^VU-GnrWc,0*9L^"/2?$Q,Sd2+cpIaG4Har'Z\Xs7!f'
%bEkF;ho7Oa*R+NY+-KJE8'OZ:@?7m[g]cEJ^UN_$nLcMarBib'TSnI$f=346a:3.7HfA6PJ!4S4/Wh+_5FNlca.`Js\%3Jl*B/Va
%k`es42'KD".:&UolLT26!>uik%N40SB?I]3TdmVaW2Ze^S6G;d3B@qk?$?*tcJu#L!'>Anh\tVnbqdRLXZfO&2ccP0elnX-58:F;
%rRBF!@/T!4f\K\)BDCfJPH"ce\/-XZ7_,4AH>O9t8K[S+1@F$iYb\\rrI:H+pAuo89L8';&o9ZQl3@9R9_$Gc1=;k$IJ-,;%?je`
%,f@f#:Rr*3XqW(0GZP7Y3u\ThGa<]IY0ia?p%MZn1t#7J>so&.Ep0&mrscLfHsXneDm/>NM/oNjk7$kS*,+o'Y*Hb_)J:J@nW_(g
%m-/Z%A.aG1hG,0#&5CO`lUeDW.>"0-+-U:6QlX+-CtbdeiRS?J"=Jq5BSaiCmSgd2]d/pq`V#\Tl!k!f-XdjU0In#Hn1l[s4YsM"
%k?2#pR.m.``h=NDdRmK&f7qV+7fe?^-J$RD]1N63X^A:Lq&_8%\RK2M4RnpLHL!q,UADO*kZXVE3.$d!6T=BZ<p32'>H.6>>S_H$
%JZQ5dYheLOfMjnk;1\#>NUC1onZ4D#lPdJFV:/F=m:Uq)4Mrn:4`WY8q\6A@1).(S,BrVR(n^$qf`KL+r-2&l<uR1gdp[$hl>2];
%7Qa>m^-39[>0#!TXpW(H,e+oSZ1l.^S_LPI`Wau5qLH"`ihQ:Q5-<i1%-[=4nns+E"We6*KtH\e.rEgi=dqR&:p<$I5)kk*DA^&>
%9PsFUUYARPo;:5=bs,07;>mQ]938L';UTZhgUGkC^e1]7d!kC:WO2Y$3e[V*2!;ZiTMC@V]_u0kQW%(qSl/L8H)'aX@j!EHFiaW0
%?*sjGOp-#WY3^mQ_N>rgC8^L(/0Tl=63Xg]%9$odiN1XJ"%>E<1?;Xe1eU/`g[RTcS!Ec5>"4.#O?\6_7_73G+92*8p4ftMh!Fki
%0=*+bZ.^QQhd=NWDNkk66>cJhc3GjGak$p-_X?dVnBXOu4oWJ)0lKFYgNP:BYW454qOu>kI=Q`Fc"sCIIfA!l3NtN=XQ[/Q6dT_,
%,"?u?[GuqnS8r!e's3'l%Z'n;oj4ucbI/nc?guZkOREiVEq%5P-=.G<ec&AU5k^esG,PB*%b0_G=@1.R?u!K]b]<eAU%R3F;,KQ>
%.D]).(fG'j2';$pV=O^1jT5S$e$YM,lZ>jrTmDF\JfOKd$c@^uYe-p3&^P'8]&"6h/&2d@'Rh(-(!,UI#[tL>Sq80RbGfuiq?K)s
%e"XU$A7mGre:E?h`E29?(0R+_i8p#)60GTUIbMe#/XW?`/D^CFmL6\<M!q3l8VAkk#>>Is&EH2%<sK.V)6f+>iaXu]*21Qeecn!i
%)4SB+c.2lIc3LAsh5/q/P/\TDfu@Nf6$s.N=#S80&Eu>TI+tPgGPHBZDbkD(CY[M;g!g67@!l@EPIT8@^"A7:`=DJe>&Rrq3&9X3
%'Q2]uW"lGdFD88*^l[h-dnEZKT+=6bdeUbu0ke%=5iAtG6Fn;\MEV)\R4TCg!c?crT@r4((_T<lD-L5a@"3T.MsuO.r^23)IM<15
%LhpF$r0eJafAWjuYFmidE;,.k`p8-VRJrrjJ&ahs,>O4EODB-6nT%t^[g/&DG.Z=AKZg7_hTW`eH8S<#XfK4C?gdtfB[D]Q2/Kk@
%d]nuHhY]NVFt5FUeau]Bo+'2jSS%V)_[JbQ\J;N0P]WgF4Q+e582d'@BVA%Ug%c&\%F19jWZ%(50:S62@Fi;F9Ge1H!1.lb0RnNQ
%eg\*$nddAeejh"brCH$NB@8CW:`"N/!RF\S-R=a(L$KCA""juqOZ-OX^e=e\feN<@+Y.:tX0kEEoFFeR9XM4"6FPW\R)C)1J93U&
%*:dLWA"e!:>.:J)@QGLSd>0)H>VR,+CpX2TMfE<@U'0I*>bSDV<]lh.g$#)Rkhtf%j=[6(h6<MVT.D$Ok5%sH7mJ)^DVush=P[VI
%WS6Wl.sfsO)D6[9);"lHIK"fgi5]dSZ"*qPqagJ^m1P7t-GW`>\9Nt!q(U!>\3egZ[gr=T8q<mC<A]mt%A57pD$*?L*L=`@3g@=R
%a+A#"d#oW$oeF4[/bEI%T.2eXI9gR!2<n_f8SSPiUSZNU$t)9XX%okZW6:68h!+*P)A>D;c&&0Oi&4j+]`U32i-+5R6/*.8)nk?V
%/R?>>+8#_oLCjg]Xim+P5D@'%K>hZBn6h)'^=!O!aokV2A*-(+E32cB`%_2tj&l+e-h:dq8:f=-XWqL3bY<g5EX0U_]2(SKniLiY
%0\E>lr6/UF9QE1-%_AI;B=torLAS5U\bTa0Go8jch7CMA*uSen7J>88PGA81>Zts=F)d<2A^a5%Q3AGMK^!IbM9Bjb$6Ong'sf]t
%ZKR>T9#1:3AnSEk,d9nAAP=;Z2.3UfrX<C@V0s!9\U4A,FplG_j9LK9YDo%%+g6Bdkgom?dB<*g&ZKW0a@2aVliu6,!m#h,@M-&O
%<)cfpA43!.(f5JoY)QgCS>[:ciCC[WF#;'2o4(%$mm+nng)cS2C%N"D%fi_:e0gpInP>_k;ddaegc9P!bJn0+SV[pqWf\XeV@V+N
%j0d?tHM68_%DdPXWXK?ol_l8-9JW`B708dErGFut:')Kc%InlhT.<q<GN*P2Z.%(Ri3'O-',:j@p5^4:Y,Haa24uO%\t;9Vi&I2H
%eKBo.Ho=.-WU?`MUAH'@d<1LXIB5IOP5<6JAK`sT'Dh$m(IW<@LC.(V`Q=PuXbqNX0tQO#IFR_N_jh)U'OWS7#4o"Ln6B#&k0&rk
%h)rn>n[-4&pSW@Yr[@='^YRXS;qkr?E\sPmR_+DCojg)'7Siu3o:#6REJG@8aB>SpCRLBAT@2D0YF\lYaL-Nsr9<q\?;c7Pk5(7u
%^N$U`_b,;/IJ.aO5<MVJ@chs%L(>d]IP&RYa-mJ[<mTaNP&ueAW<_"3f'3OVa0$K@!q9WHSU=/HPd<mT2+kS0==LhB?dC:]ia"Qr
%?d%MG>WQNPn6of5#N(A2q:@*D$LHd(,#!'^*fb0TQVE-:\i<f/S?hWulP-t/P?OloNF0e*q,I,5e:A,RRf&UGWob7L]u7+JoZQ+G
%#(BD,O3Au=HH@F>/Sns"S%prf!1@BjEVHAM-a`4(;NY/*m%est0UphSA/!^kI(]7*=j<`URgdYjj"XhCM;5#/l\DO?iu\(cW(-!m
%_XM(@K(3E%SOmDG'.1,-+/*#Dk_l&tf@h`e9G!5kRSXFKhD&_o.'[&rmKNK7nio8&qY?=k1iD8`e_\0f`gtZDqK9a[l7=S3Xb4rq
%&\CF-&YQ^aqulBrXUi&Y_(@]pL0q5&K*@0dBbKT_I>NA3%FYQ=gUiC=7:gs#OksF,aGMmm[C<&AC9On3?8HIW%h]Di9;3#tCrP7K
%[=jI5#/d#U^Z!6d&ldF#Dt0]%lXb5pfeYoR/mfp4h8;c;I?L@8Du4*#R*K8<"a6_DrqUWIEHLOXmWD7OVGc_.&he(?>"Phs_5BK8
%k/1LbV0;ROoNa><Ldb'G)r&E`+=B)9l-#4^S4']S_m=HAg?QY<DjRN/T<H(!83XdaALlGV(bVN&F>fiaX!LWumSqlL=jGI3LAZjZ
%Z?1NuF6AL,U$&Ta'5==i&?!cL0U>rs`MHCU.9-g?Yc5R_akl7$g,o.p0_8*?Ee"YqQbgT403&KhrVk;(#L$s1rVlbj0!9<<hQXfX
%j,uWGHLp:VN6%KAfra'6&6jH>*qA!*B#B_/T>G_A&&pY]RY3nZONIH:rh[$CLjs\#Fm<=BJgLGs#ZA=DHcDfpX@K2ks2Md%mgl3%
%L4AeS)YOE^QP0;"X/@ItkTToi&!oT`s)q,koi'-5\Y&;GWh3SbY5$],V;UOgG)lL;f(,#3Un:Ar'K]b%EeZ[J7kXa9rb.]^;<HbA
%],(?lHUh`JrN"bC5LuQ]r^:9Qj\O_d5ProFk))BeIuF+5=5+8blre\gIiRamrAeH^fmgRT%/BF06IpWmMJN2Xp4W$E;E'sAX5<0*
%s2N\`qsU,#lT!/,c)'WR3nGJO01C?5?b3fspa\;j'n<WsQh/f<V<`'$;2>-_jS$i:S:qLODrp:DIs6f2>k2NmhU6F+EO)s;=C,4c
%W8Ci4"dAi5;Q-quZ:(63d3Y)BBu2]"r+kA,8NL/7=GfRO%nh98b0Eo/]R=!Veh7A'RAXP4.JoL_QZ<UlB1lm&'5m&$5Ar,ZG-?cr
%[hK8C&D*87SdYP\V,@u(Y"#bAP'.-61mcsX9C9BV`G)pLQbr;k_-C,Lj7_f^!NgIW*%D5Lb;=Pr/b<aoE*6p*S`QE/BQZ=YnTq[7
%3^#N.4tKNujkOugG<,\Bc7Ki>G=0Q_bCT?J8%H=?XQ1+;=fiF-bHK.[.nm;)\k(D=4)=B?b0nslF_,tO=^)1r*Rn/hkjdsGn%W\A
%a:HU8.so<Rs%5%8YHJqOn^,EMn=!^pf]qh+>_aO/.hCB9q%Y3]I(rQB3NfPB?95cbG5!,llAtX^@@G`SS($/-YdaV98tRT8<M:?B
%Y3qg_mB%_6C16e.IU6AE3Sk4H(;t0.old<]ZhgIVhGu/1R]uYbr/tE(=3JiGImr>Ief0nG[I@A+]uGn%dBuN:^0ce4nI:jtm6J0B
%?9>]3[+:+M>J"Zpk6Ih@L!mK=R`aNk[8PW8[9b8#]tW(.%]tN9m@/7dl7opm4c_e.-]SXR4aU5.XQL]!p=HLUNV<3IYC<c`'lJZi
%c!9sf^"\A1UGcB7g\#K<X7FMi+:F<kh,gSfOj6@52GQM-DA6</[>fqHV7]YcC?IMI"=7l+'?<ason6KYCaXl2J=+OI"nnQLiP<96
%WY<I/)jS4`;=Zd;@ebudg0PAh$,#L8^U]eZ$Z:^Nm[#kda4/l+rZTnG4ChOCc1<e[ft92lVbQYH+#Y(lj8ETAGeO[m!k$&k,8nhD
%ki#DgR!PI+_:,NN*kX\I0n[VHB/TI1,)([*V$dm4g"L[W:2DYQm-3(raLL,"G;@n'=h1lOFo.P=\&p@?HE11`>_eVK`C;8_\ebd3
%O\e.S5CL-R*U?]MFN$JKTpLQ#P>EKO;%N>7G>pPh\3C9-CF)+`X1*);nF>&KFndGqZP$<!0+Yts;+oeQ3b!<A6PgQ8D5jhbD^Tme
%:YTNE0"ZOUH1\HQm)X+[je#/p`^Y?2@P=&ee3:'HW2"6ZRC]DpY,Ti0b>U![QsS$TjBrmp4q2>W]7iM@c77<MI;+KG?)!Meh)`be
%0ro4rS7-TmK?TpLesYRZdk,XI)*VFXC-cCeEm*cb+B<*[!Z-)iPPiTMRhl`.m%_3+@pa:7M-IPTUL5!X]:04L]0#!jGB=d/ibgYU
%\t")Ydc!7R8r!p82S6VL/M?PualFq$\U>7ObFoin^MRhF_WGH>?]aK<6QqZG/dTFS_R!(e2g""Q^0MC2+#lQN"-j9u\:^^>)t@[(
%Bo!MQfG$C^1c?^of@%t'@9Ycf-917-07#*^a0A]kq(0P,N-_"\'5LZdq)hs?O^HTQOF1bT/$c/1Sjsum,sS?3rI`1n>&Qp<ibf+#
%M67ia7[-OeA>6'QH7)li4m&K(l_F,d=.ud@W/YA;-^K/1G4P<HG"7Z9!]t>N]9h@#rbZ\"DmL)/4]Ue/h<1i(j5'D@cgGWj*1M;e
%WRBh`l1&A/n+lAS=^\G8[Fb+>Tk%Y_n'la?5ATHQqatHN[;WJg3OX?ZYT8X[m!>b;Z0IBMRZ2LGs7Fs"Zc]rs:KMFLna"nO2?(1i
%e._.0NRri2hJ4HugQ\+N8fTB0g1E>Ndj2i/Rqsk*jS"ajDYGP^/KJ)m<c35KP^%B*8KF@U_l:]BH9B`,3@Uc5fClRn6J;jD0-C,^
%['nZ#c)b9eFu%J4\stc\)jcu@=grJ1Ns'V:plP,iO:@`>1^B)Bjcb>+@)+n#jQ#<0.W73TDsHT#_rdh&bAJ&UpTj<Si&,k,?VY3?
%jTG*&csoh3p=/3^;5%*A4K;bfHcI(<pRU@#];M]>L`p;*Sm"(^+dogMh.Hp6U!4>'j.!UUec"f*JG*?@ltM=;8b#\g:0nT2s(P<2
%ePG3lqYp,U?TpVimQ@;j_C(c8=mCiQcL.$F>A%m=`d45U/'IbTr^/@=gjSIZq]DlPF"(TMSY+"CX"_eD2(/S[2R`5,`BO/K?<g(V
%q\RN+bG2q_\oq49fY/aKT$@E)U4;DN=Hn^?42lSXj/cAK<_JdKjf@Ld`;O]:nu`Nc^GLkr`YJN\94+7>pJ.lkC['I:5bc'11tV8$
%p%%rS>$\]tX*a(MiUHC1jt+"S]r<kab.#3R(%F3TGZhV+]P"$%^S4`s,5'aj?#_B(gbmQ3gc\s1Cu-8?[AWoE;eb\DYZpfc,ZhCc
%LPJcSn'V.P?@ur5USj7&j5kP0pLk7`nVL1tjejp7?1gc&2_Uf@Q^?t"lio%*QZ)0*QN3B>]d-g(j5oO>>?4e1V$CQrG'0qB`UX2/
%Qd).hU)3WQl)Jch0:A<+Mm@HY]n0t@KarN<2NG+97G+WR<mJmQ=_V3u#?:,Iimmtp>sd)*d>KK$pf=Ph?/P:SNG=ESYmd,(SJB_I
%CQ4A5YI!DoBKa,d]W19,e'tm_5ZBh[N8/3Ndi:EGY<osnI4[PaS$23_G./Wul'97g.P<V?YAH_c8Y8ZPD3%_e9/k,/Ao+BlCd'SA
%UXo9r]\Z8adgrSO2RR=:M;bUWFN@c-p!V\lS"\,ng\J_X9A9aKO'nD8l",p*]?Vm!VOn<uAh<k)ANk$i#G&YF<UL[Z=V8%T]B?:I
%XY3*mKrolmk$2p*#I*WB`dW>(6iBldW\%5P]Sa2QWa`QFI@oV72X[o_hBV+aL?\Rs`uQ8b'/?</V_ZRG7a!439r"\bN'COtK4s^_
%q@=7+?`:[7.,fb'`!'99PZT`olIpp0`TI\9.o/2tlm'k15]r1qX&+@*8Yp:SU1tA5[/G[m9a*GQ1)Z6K8LjZOK0"l]bB)s14MY,r
%b\O=Pk88X"%$:?i/R<)UTD^$_Yn!#f.AlCrelA>jZKCJO>pMn[pLdcKq)ZY?a>HT5L\(pUB,<II&KXt6pnMsr#L)5X!f)2j*AT>H
%m9'=A#6&''Hu7MWT@*5/(B)?1X?gWZf(*N,X.R_G<EhYSfGU=cq"qW,%THJW)QBH/I(Ee[qgk$RYXcJG<n2$lmg+IJB3Qf_/MS*d
%Rb=9.d="/[[8@qq8F-%sXTi+m&KW/hIBJ*_bGNkiW#BpI(1+LHl6c(aQ'dT$PKm_8ckgHa"LH@EQ]Z6bUd#);:-<30`(d51fqHie
%Z(ONaCV!S08IH6D8un\R'@4aT`FNq63+cEUCnI8/n"2Q/_Lr*Q*Q@d\5aNOabT-=>,sU1MMB<n]$u(_.MKTWA*2&`(1ICA,>Df;%
%4<[.j*5QApq:XuW?)sT=1?2&k,Y(7Ibi2':1R@SY$:!8pK16^Fpu/31UK>QOEs<$h8C*o_g%_'\4OmJ.YVW)P!Qe4ZHFRcBEhGHY
%%2)YuMUt639Ff@KNjVpLDc+ESJiHQgs5R7mM<p27#Mbig_Lm*Tpg[-liV?U.0l'P3\Q&e15n3<CZ4.T/>5q+S=`3m?]/0)hb%,e,
%HkkT2$E8a%@Mu^WeXVi'0speQ9Rj@j(e3n``aG/g^=`a^heg`<HK/M4p_&_%bN.a$HETB[[8,>if5O5uO8XGeWJ`h2',"[A=6!l@
%-n3uBnj>8^=)NEF.8T*>M,0^:AtBUOI`+BVcq*$K$X<UgXp=&NdDi"u5GnhP!U_L9ks]eBn<ee<n'?DVgA-dr/N:.6N7/-I'%56B
%FY@]KO#h83LOO+/L-/$5Pl\s(cUfMBoQ'fOm@UN:#C!=pf;$L5ee,N;(.uNhK4[8EC\a#HriM1QUo&f,/&LCV>$-g'/e@YN\G\td
%@JqH`p<$hkc(%>*&;Di:<%%@-WbkT`Z05,21UaX?m_h0,bVi-.MrsqL+6oeoW#_Jm@QU)`88>b`j]"4P?@+V4Y&Xm`MQ+g77(bVF
%VHt>Xgg+SDhDB8DGdbu$#PWo5?7*Xn>UNkNokTpA<Mb^J+-*cRb#Rusr;IjG9STajcg$7C4N;O_RE&F*'5e"Q>H>H]`^-F.dh$h:
%?9n?ce]2G;&+aZ_eO7*?XG_;p&4KpV;Iqo`(>IML^U=>u7<anj[3l&?XhE\ETKa$O?<?-?cuR<5`/R[Z_)1`K7^/C8oB.(73qjWM
%M6F4#_8PTh$_@K-As-nIF78C-\K3>hPm2]cK'@$QDG<i(gPTZZ.k_M%l)9cl=81<6B(2K1cP>$f&:m(tH;qouA0H9l(lPlGlcnAU
%8T\0Q54!#OVihYG)7#bnl<FAO`-#(mAuSBj95Z8aan3^C7VGFhk[M8?iGb8jN?tnmbLbu1RE*4`<;'X#h@l*m;fLp"EZ\^^bE$2h
%^"+[+ZmTZBj0m_Nf>;e@8[Xmu"GDl]TN@Bu76`DsUpcPZ[>[=pBAt`LrpW<F+WrHJ<EdOcj@aGFZX\L=\P=5NnB%g)M_uDob@H0V
%DlDUN?@%N$mFQOKJZa3@U6X?Z-aK5eMIF0("Q,gUTFsc?&fq9NTJq$I&5)%T)t-RuSdDstn<amWK\(7WR!K4=WnYR4Bgl038I209
%o:<eKo3T(306cIPQ1@MZaKW_eEUiRB)*1dcdPiiV4blWFo+#d+;e%MMUkd44rheKiWG3S^+XDb]PsB;,3I5Q0&rmCLUn?o0<J%hC
%b/?u[I`Y#RY4p$j8\AXBY_/EL_1WsrNDag7FZ8R^Up;lpLVhhrE4<<=8a1>K3oVCRkCD!^JbFb[&W7F:9C_"=\+cJ_,J31aI=M!0
%9L#so@0cNBf&EI#l<VJGAn.q`8CiKQ]6&n`fhABB\OELnh5IXmM]rWkEX2-t,F\,W:?X!V,'t;)AR@mFecOF*8qjb:EW#/PEKWmo
%O!KTH/la[K9(S?^dLZ'1+JB1Tf7UnnDJo2$EEHK&*E`N2$?.rh=mDZbWkr$(4/?nIW^a.NpZiiR/&S9emQl3!,g4"PG</'SBXVDM
%P?LHiM!>E)kF',+p2GO`</mt:6)H::aCH[7h4qTWriEL4ctP'/\shA9kWW(:n\WIHC0THKaB/ODf+3R[n\hBFY)6@.PEsL4@%*W/
%Q%![#dS=]uVbC\sLtoecpZ-G,n[@#@JI%.9=DE0LIQ[qIEd'ZqTslu:E9G@eW5<[P]Vob'j2\W_(7r\X1jU8%3E?jGcB>`I,!BI'
%2V1jWq"iI$8[uiPScesQ5m.m@9*N`&9-_4F=TAI@6^GdCI1siiJW\e=Q?RnAkLUj92_2_X?%F<:g,152Gm0?%,=jP3I!cdRm%jFW
%q3>>dgMC$^`KSqh69h3]\6nt45o$5ED3Kl`Q+"[0iQ27/HFf'AC]9SU'3KNPdKdm!$pX+[Vpi8B>)M[q>8t\4V[YHM_jr>TdY;*B
%W$.A#-i#5+Em-QC\kBUr1F04W@1<t/$"ZLgPe(7on(MIYfg-(,nCWnEk"6cGl!PWL)OtbkN0psL4f:f7JDbJ=A5-SHL^ab,[haU`
%=ubQJO?c6NMiuHlduZ:RWJ$3/BNF]3:Ga&s0MG<k.>kkQ7.pl8["*.=(*Qnikda'6![4O!c&Na4_%,m-ggABs0sVHHc,aL!SWI01
%_$M<=<5TF'-$Tm5P+eDF%gIs-Zf[qjh><#u->naLB_'9]bF3SCe`O4Lfu!o1+E5WBCVVTuS82UjQ<q0=Y!dm<'\OL7NPK0Kd<.if
%@2ao[]-E\(A;L_UYs5mkjIe1%F_')&h@'P6`A^.g]/O,(!fY'RIipLDB8Ln(NEE8sA!8(C,ia1s[qcQhR>+NY=TE1#%)2Iu2C-@(
%1AWk?,^Wu6D9&&qXR\]>keJ)3A8QmMX!h5,X.[aF=kaM1nQ,R^=uuqDo=-qm5N9Y_j&RKrdg`A\=?Um5ZLAfbb@Be-YO5qm]>`#s
%PfilUl)U;k^247[\9n^OV_B#Y\`&XD0lF4c)R.@M=7A]&&C;CEKQZbj"8?<C/MVR<bJ`)Raq9ICL/A;@n,]DKN$CqgLUO3fl?N>g
%F&/!E<oY!u_I^C,br4%eh"JbWYBhNBYI=<_a$jAISlmj[mu),SZXb7U4<*&@C(AVq_Gp0QL2h?]+C_^*GnCi7N\44"k2siW"2t#Q
%a)(\KqAaosHYo+MNJ#NEC>(j[:.TmaIgA-07<iid0fcBZ/k8.5^sPR?nkhPF<R3a\D(U5J/p7"BBfY3)ZZJDl=rJ>0_)1RnBu$['
%S/$k;`6U3<fB_Uqp*slKX3K05\A"FhOCdlL'JCp?XtDPMRqrVETK`p@6ADp=qd+i/Yj!DCp/8:p@,IF3SDAMm#OZCk=V'@9\$`p*
%LqR05U`'S?)Sl=1bTL(YS`\dar#s_pR$Css/47_BI@E`4.iB.EXR00W5*1EpToO]E+?UL$%9uPk)sVDU:oXXS0@+uclJP^E6I_T=
%.-?%A)'/J,+*\WZ@;J\3pEtDM:K9'##GAI\.4.k_>G=[*=YpGjV8SsKef*T09?]L]DD#SMXkjGl.Q=1f$g_]3Cu7lp3Hp]Icc6$T
%gZGK+#jC*I`m7Eg=.*$\df3ako>V[p2L;2^PrgV+#EeXlEe:i;i8,aF&,o+=n)4#PcX2`AfZ*E#U2^eKa$3oO#]BjP1/E`2Zg/_2
%i$8`08>W:aBN%Zgi-0gd#R5u)bl4Z@[N2;F[h-$dkJ@*IjfLa7;2dr)DjMTbXS[bX5Dp<f.^-'8]-\3'oZLbea<p7koGA;\Y=a7/
%S[MnooZ0eNkFc9mRO89Y.!F%bD7UF>?ET&h8Mu7SQ_N#:r\\#p<,Q-!Le_M&@Os(n0]_H_d8UA5e+ASr*QL+G"'Y&LZ$S<g@a#<.
%+X]o<`<c"A</FN]T8Kmh,q-bjAEZ]0Y=CAtrf.<Qh*,_j+4<M7^bp#T-,tesF.JC,pL[2\lD;?6Pn86'_6I-3@4BYtg=\l%_,1$R
%cr/UWd9*$:lfrY!I<n2BG3ma"UipTtHG.Lsj_#4NZTU-\6gi#EQT4<9G<kSS:-,m6<*^he^jX:#_TMG='T652C!l3SW>:EIADBOT
%qV)AIjV$^Ld>IC/h$SpJE0i_s6)b;!kIY<X_n0SSD4fpGO!-(;\7KJd;THb?V8<)hQ(BLXjkF-65?"])<4/+1"EAb239eEX=St?g
%cKg#n0?VRPelE`_?0*B;Z[I-70BQ^lO)jI_nom!$Ak;@/o,$/B&a`/i_QI6ainh2X*m6b7D?JeW2Sj6U\BI'*leA2@14*q6f]ehH
%++[8o5N%"`i_la]$e'l4>BUs%1\th)Q+'S%_iOsF^X8l_Q5PY?Qs<ngBdfZ6W@BSrj%e6bSDD2ZD4,j6S./!^#!bWAgt3SS76i&^
%9'P_+aB^2_a`m'=Uae4\`KW\:FD4mPR&r;!(-+J.aelV6br]5UV]380RsP^<e4KS4(jgVU+Np=O[X6GZ75Cp$YV4cO,YsV*qi9DZ
%o^.XJUQt:Hg%%Qq_-JkQGJ!m^lj%#eSS'j@p2ff`6`+W\aS&)XJ_c??kj_9XR]7r(Eakgb:4e\*D%;<+gd)p^WZ&s*pH*qkeRrF`
%STJTCY!)-;>AKF[CFb+_oC?&c0FU.@T3f-@P.#a6dXuGKPh<pP*?ljsp-)e6Y5*iTAj>U?S$S;^2K.Y-Q/)E90SW41QSZbY,P[;(
%/7o,CWN@B5U`$<-b)LYW(`2:lR`rGjRXf"%)@M.?6,?YQ&8H%s*OcL;[,TVb,IXr1`ab`rhP/Rb(dh"Sf"4EYmWRjcE;+ofpOoU7
%rsasn&UkkO1pX"jStlh)!"(F_mGee(TFW<9?%rXE:*,?+TdB_Q-?,IC`fG'&MJLf!j3pW#dZh4q:-;p$)kciL)RY,S[T'R&;Wh=0
%l^WB*l8Ns&]V__"Oe+%>C9)CC`SASRp!sbtToLf9Z2bpO7S]0%&#nULSScQ*A'PIU9U`,%A0UQ%V>dW(Dh&uZD@=(Epg-9hD=aa.
%U9D:07=%,te9S\l`>VJlB9t="2'PUR>J9rO-:W-M@H1RgN.5o,L,eo?437n%&GlP"\1bD4AN)OL<WFTb`M`_*=)<$?#g]A81p`<]
%`o['7l#J,95:L,DgDoFFCUFpf'6i4s-uJDY4q7EBEY''($d6XOr-K:8$&&I':P2JZ#FK%N!2qaO?J(P_EGd"@RGR.l*`8i^U\(9A
%>BaTk5_;A4j/4?e&kns%r,<'jrMY=!ol8ccT5D/,X%=L.\DIT"-OPBf\%a:<#e4588gt`B*3:2D9#*9CSdW&tb<,h6`)_\D6B4*`
%%kY^p;W4tYNf/2WKInFT);#S;45s9adYR/KbVH3@jX^3J:H5q-j6Foilnb'nf$Y\dJ'VhH;r4ZV1E4@>Z?rJUbFUpLit$IK:hj(6
%J<CM1C5M)9o]gIi@Ya>07m%%ML.l[5mO2Q:r%&pCoIcR+#)5'8fr!=$4-jQs&p5AhEj@0UpBo1i4.,5(SlBaR+7FL4d?%mK]::Jk
%LS7N%MJLh)C#pYQP\:9Q>W1?q1m_"DIsM4OXh!]s7RhG*i&b2k^f6q7,7c`j^`Cam3_#PddoUVh-F;9=WsPqqJ5?LQE`_I"5aiW)
%W7,]h:V=F(A#X;+]ULt9fZ;urC=YFkMX*luGYIAi>1VT'q?W-`5O`H0+$$g=LMJMDOScKGkF9e*1WrMHXdkGu>q12NYVRI=I;H]9
%.2O5,:ShC[jb[[qVm4P#r10=NG1D8h)PG#QPZXb#pL#Lh2H&)5p9N%.md=\Yp$h\E1tpDZ%<ePR.7Tn\"[#WhNp[>qBX-J@E(ZX)
%?T2NlqKP(S*H\kpLB*?@<k4'0!]NcOj.jZ(Pe-In1tXW8,'`(^CffAa8KP<o8Ejs8CNo+q6hGMGR!J*`L,-#V[5`Q.-P1R.PtaJ\
%aFgm\L$B:E\92b0-P[`OV.0?`<TD]<&P_C9Z+g3X%(E(=lto=XmD.ul4N^@Kms!VDnU.DY3U-0piG>52][?:=Wgm$,WD.6A/FK`V
%218QNVO`qu!@`Qc(G][)Pl=V8pBO*==[^HjM8bh!m7aMr-c__>i.e=g;OLS`">":BOD%%+6FPW(11UiY?(k?$%#R>%c"IW6^6IOX
%)6C/9=!FW496Jqg`FYOe2Yeuc(Img]fR!u_gjq>G3O-;^95cs?r6UdE%T9lk?=8a71aLf3gZDA5FJE/mf^0\#gci2SLr+8PBFOR)
%%C.dJ]:dG:R:X2s5MQL!BHIr^nQUUHa[rHek8R^fWZC%R?eGXG^"gc3dMia'T3lE2Nr2o"NIqDiVM2([C7JC^b\Bn3N"#+S,H#,(
%mV8k'eT_Lc7+6pJDd2f\,g7_S%sm4.;uHDC+:VEQ9+'8!jkeFLFEY_@ATmAfRX*c$MMu$)$rfn>,Goj5TU02kSls)iFD5F9c2__?
%+E"i7[]sB(/G5st/e8tN%objU8@^c!OC0Kh4pU!?,dVs(RQ51FE>(`:f.5h0;/hqI:T\hBdcJnXKp3lg1])?:F(l)-rtuifSY7&!
%UDSnQKmN8u;LF5?ZiYgRG"@H/EA]OSSM^bd&War+O-^0XPqCF`a4_bjH%CPgg[:+,WZtjO6.C&Xk92K99s2;LPWFNsC\$#fX"RWk
%AOWb-S$:O4]M^mY-T1oe55(9PDO00Xe4QZ.9Kqo@DUK(O1m]=%\1AY.\oj9MLS%4$1.o8:ne=^:rCEA*b3jVtLVR0frYpLQH*"S?
%]K=`Li'qX+Fq=-%%F"D,"ZL:p27OD!Dd5;u[2O@h)_N'mk:*D0NB>fo_hW.[F^MT;\pClZr1T_SoWHcrebI4^4jF^cKpL0$Y%tUp
%@c4RgcQ0EJMuOKoX`WmhJI5u-I=pmuhc$ECkPO#97^&)<PE0upBt\k4E"j!VISU!!E]o/UrMAf+Xf?h</"3(98Uj(W\?>REF!&4I
%T(S4IG?91C]9[ki#JTMmpZMiui-O5KaSTOMnI;nI<r[6Sjd$TP>;%Y,m<9T2?W$OEN9"L<e\43g>B?Y@rSIg1p<`nJY!lG*E;8Ya
%?he)aLsL[%#&&qXW+Q+FF=pP5Kg+P?LWO=tDuR[D`7ks^kj87BbkNe>f;l3Gs80RXBNqXs2UjR\A[l)i/F&ic8@1MWqCY3p6t$&+
%8unhiO[rBh#@VNI\g?,-"%:!(9%?d`_ec;!4u<q0YbM_RI0b1n<4#tE!<';cB[=@En0VcBiN)q4ZVb)HM#!NUU]+l?cfcCis,<t.
%;%2q_\:88=21+amf8Y;eIrqIL7"Y>B`0`4&o(TT$5=b_sU(Pag9>bNRc[-#UJ(Ibt+?f?b_7=R,3:c4>&a2UV_fnuDk8[TV6=%FH
%jV:^.p?g=Jh\#3[SIUoc79@am=8`WF%-tSJ;15D3_@4CTZ@oe@9_#L61$#+JYWO/jX52`!*)5;[/o[P]%7<6(L..56Hm+U[F0n?"
%*%-PNL>uB4==b,OiM/'Ed:/L*":<d-4q'7;^(;ek@?C^6+(?'9bYf)@.mnNHJQXE)AU#XTZP3Is@T_bpR"pfk0MP3m`_g/1L/&nX
%L*:8#+Pga7#Rd@X5Vp`@,me4Y3BGC-'XgS<QtGlP,_cJkK5ikC#kKUj@W1HR83Hgm$%/,+!&93D_BR$_-99:+!q4$LbCUu`<`5<K
%.FOLA!DnsH3I%3dO66XJ.nmc7*"\9sHiaIn(2<!TYS(=m@8B1b?kaXnTc'Mn!0[^5/=9m+*t(&+J-$68/B<WU&)e>?N3!eN.SHl$
%UBLtnP?Au1KIFaD.G,/nKuM2bVZ7^[E(h*\k--'R0jr5H9GmJ[@:Xm#I4S1hQ&"3)&-k`6],5-ndYF,6TUas#TFW=KZ"[O!h^$4^
%__)<^2J<-0=kFZ7p)">R8O&l],_Fo&!\UhgUXM16bRPm*9,qgM%A.0+Q@0BBS!IJ2ge!6pJWFJ\Kdg0A#(2eH!D\l0FeBUCbK>VB
%n.BOJ+\RWH2?rCi!$2a`>T3a=L+/!lIB:MCT`qk2(WincT/=`F.@IXA_Ci/M/f/1%`!/3:$4m1a7dBJ*XFgcS;3V@8"2/DR)X.Te
%VcX/u9jh@q@Cr4i7_o+&J/r)F$3kc'11aq<;%R0Z@<rVGMW8)lp])h;H'(WAcgVqR-;#6cX+;9*"PblX/HJ%THR?P+^i?+4'4F\1
%-]q(l7c"/dLqpjB6aVmXD?B:L!b5%Hi+F/:_VhT&7&F(J6O%'.BEFn0UO`]lYX[1kJ0Q3E1pW,MZ3HdJi%H3q<^55_RK^._j=op_
%:nOT%/1X$pCluL6s0Kea6o9uE=ForM9-X`C8WZd$/V%JbT1'X-=.iYl,e+!0>7M5*!@`c_XaUu4&6OmX!"0+O"oC"sPdmi[#lPVY
%FreZ?$T(\=+tA?KBT@]+nN9Vf[%!*gKJ:Ha!dK8"fn;Khh?%`5[dg#J,hQ2H&[7"NcmYYGF!*KYT`PJZ"&Zp#<00Kj&]bgl."a&o
%B9@mgT\1Td%!6#og^2UG&^UML_CYu>#M]IuFKZef9C`MIV[Uhf[YPV.I**U!Y]sK)(=7Z+^dYO5%Xhq$\;s'YLe@oJ9[P\?P`^1+
%Ws0mNjoR6$FpZXu1:)LX.)Y<q;7'/Q+":$R!m!S0`!%jQ>6[VB+=/H&a8s^O?jI_]*(_ge_1d<S_*f(8JV\h"_(??,(^H3//I^RQ
%Eb$Fm[e(!G#XB^V9k$t6!Z8;cW87^53sN/!oHZ#H+SHKZDJ;ISPXQEr"Du?28-fcQL'8.k"V0RFL4(]jjU%ON7L7XCUaTAb);IV(
%?A=!m_AISDLM]eKP8Fe2-qZKrRiu5gTbnn.U&-Hm>_@&(K*_ZE-$tR[BISH4d7h\>d=8*bGnbPN+0`Xr$Wu>)<4L9tZEUNc)ZW+h
%#)tNrLnG<1\i?1p0d$QH[1[4qYQ_hc3"k]\ng&u/!NcI_8_@_]plg?L:oN#d"VOu^:-uPqecaUH!e1k6!6X(/+5@:/@5&OZfRQ7t
%d/\b&#?LsrH:O</9D?X0rL`H2#l&;?M'h=LXjId%&2cfWbMY9d,NoeS"En?E&1ihB,XfF;5]2[.C]RfpK,F\HOKo!RTV5p+"jlQ:
%&*=qs$Sj!$YQA6D#c'GM#h9SFYe]%i+3Yr:ZIL:Q`.:AYPst4R+AfL[Y;t,*TEdaU5X.9#KE,TpVLhrqgT&`$DM^@XF\>noaKZ"$
%86.qe%4goQLoN"VNl2]fKk5hS!s_I18IMJAgd'5![MgBMcjBC`<X]c!!X%fu$5W7e1(*kU+tSU=B8*`e43,0jTGhc,*".-'C&tbG
%^_U;]S/Cl0huHCTQOu3Jj",f1kiU6&4p_?2#R8fE1Q3T@SRKncThQh^R,&3^"l0XO%5;/k6%hLUZKQ_pG8e[9k\SU!aJ@IDL4'(R
%H.8N-W#BK&FYgtC!*eGfUWd3;-8(iVjc3Xg"O"0k6kYO#&l^<e&01OHBG6LWJAm(-4:3.h%#TrZ(n8P'U9S+$E<3:&euhmbBLn.M
%[g<`hL\aV2[QlpoEu$^=BQIU_6/]XC+Xsq*W3=$J_(Wl2$sF<L'_+FVRp)T1f*PV*U='u+4P]o<\uq]nBHO0UYh0p]*k=g0`Joj>
%l=ds=or1Vg^lHLem\"t42\()fEokXW!W`?A5bS_0UFLj+'I/a#J-_g%()f=25muX*<&;1f&U5+:<Hbd#)+EXGglY&*ST>7dEjfV;
%%Qt1E%N8a0_)Jd53K9^%3:u$L=!O_L;$%p.Nt0_Y\q9Q7CN*J"((DS+%0hHY,7fnE1MB2-UbNbI%.CQ*X0B*`cj6?ONf$BC.-,a[
%h,-p4/k7u'R[XLEbtt.j;+(Wi63dgV%IP.7EtLABPWX3K-rUc;7G)M-jX>AL,J#umG(e,'"9a>ldR\-JM8I%.f["Su0s"kqHUbeJ
%AgjH=Nr]dt.<*$mQibo4#,-Ci?^B'PF(AF<=6MmONaN9P-HC'4aN'K6#rN8,P@9!FYXM%9"TaAN'*_.3^tK8IETIdk7DcojM&<2l
%Ks@D'CW:l2:_O$b7$q@=??A%;+dZ?geUkB<^T)`Q*Z/4\>]!jY0dOT6"+3W.?X,0j'kGV\A=Z0oXZ0E5_E1L;7P#6%cMm=sV1C`a
%K1.aOAW)9S^+k70*Sh+M]iK=,DIc/r<t#K6_[fql.X9,ikr7$7)Bm`bClp$^!:>t8UDo0_JFWr:"t4Q9"iWqK1cJ.&$V^p1%)Q!I
%"9.=88sM+-!8i&1dk+?.R$=@c54F%eEY&Lu!/m)=d(of%6:%;BRF;ko@Aa/<6^e1s^lTe%@2&adL.V[V,#_l!hJq.8[fdodLjE4-
%?4#iHbs?qm=MG4,USHAVJ=S">@1m?0BGTtn?GQIHRX7l6*&o(6mD6"7khCXg>MB280DZk@MEi24!FJp&BG=L_'s*%aUQP3p1fTco
%U+_Q+$FGAKT\9V+5k?gHi%]liq1149Pm*>n@V-C^5A6p*b<b2DDhI!g1m!e?llaCe@08$;2Cl]%b30'rKYn?G0;,m#5SAu](MEtS
%.SY3q(0YAoG_mS2;lCBje6X+u(dN_`>f]%?[6i<'6ut"ijNT]%3T,??6l[K_g/nYU'Gu4R6blEZ#7WGcBcs^4Odn<J;_T1B+QmVF
%l0$G=Es;lq,7IuhmrOfQZm:cSTQ+C9S@0DT*%2`P^4Slr66uha'5Mj>=b@Kq$Gk/nrAG'._>4cmfK4oMJ=u\sEZUD\1:g7$3bt$>
%a#4PH!5G21M[cCSTe2!@5^G.S#3QVI2&OrfC@RZo63GQ-,D_d.4^M<rR1oba&OoM.$)2hsgj'<Ld+=F7c6L.:L+9uHSC7Z^#m!%R
%)Akj[S0e8b>nM]9CCq!;!<FieZZm-_3[PBq4!tW,&C`MuiR$$h)7IlN&Ff7dNF=DGL#sf3!7hYa"$^1,M^UkYd^%Q!.aVl7l\qMP
%O4cfQ)$5,kP!Cc(^nWa/)gLc$p4C=6?p'4qPE@C4PYcu\2WRB+_6oD#)[$K\WZc?Qd-CZ8Kc(\G8K>IL^UmX]hZg1#@2OrSI_Ul]
%]F6CcLBa;0B^,+E13pX>chKM%)__rq(7`2m\hO9sml01)qSLm'_c9:LIA/jfLoCr]4ROFi"<X]u/Wq]:q(:,"+b0RB5^o@tl4]C?
%OD;R"n(>cl\]me,g_('#q;;2YI4)MmhPS:6l64hLL]p=%"[#)6/7UCm_8K-a%6["mLd;4+1nmI$3SK@Uqms^`5Ziah1KPgKFK@?e
%dth0J?&uhkR(rjn`*%`c]f`Z&Wt#"/&9A+/"K)]bMu4t6L3BuW.j/=^NV6QKTgfD7fB>-@n*)^OCjpgS.8%A\Jdg[a3fcB\bbh+a
%m5P_a*-(??+.l,RAKL%4.:+277ZAJ:I"!F<Q.[QE<b"pF5<bG3l2ms"g[TKX9[Y,;V_R4.G+VNYJMqus7HWpkosaYln"!Aak\st;
%k2ih1R!`M#:FZTA#EQ_)RMf#OrO*jqh/=9H>"h8VST_EF@G=(g[6]$\Z-ok>(,:<!Z2\3Va\&B=(1B-1WTellOIkl!%[:g[GZTg:
%MBPE*06]r_pQ9J*D^57QB)b\)6g,"TJMcd_H_IASMYccjC2Z2J:t2qJAnP4CO!L+ijX#ERCmu.nTg>\DBKWl8]Q9[a,=`>]#;?HV
%PL,#;@$Qt*i)($*P:2+G0TcBGK`h[X(cs+\ib9ohfV$F(4jI25?68,:Hr2\#WoU6a+S`j%.RZ4I'd$jL.*E7?#oL$XRtq;\Qt=9>
%fS[f?6sO9Ed6F5qfTWtcAPsi37L2fQ5dtf@1JSJq6P'^CoFS.?];G(J@u+/nfI/j")5<BAJ:L270WdaeUq.uY@2q`-_@WPSP"QDC
%Pep?-$BHK<Pen(@L;hBkJ5R4ld[6_N;sHLm^R.p?5QX$k<?*b*nt_aQj<0.dL:N1/#/Y2hRo3AL`"8!FTbTR%_K%(AX`,$kl`8gJ
%!\WR;Ar*KI*m8T"+g/[,+s&6`L1p5iQX<E:A0@9^jsgj^*LMR"U6U8L!SfA1EQCCiYWP<(d!5](;Zfp+?<NMIfEs!g(k.jSJ4V&T
%)e(<=Eth`Ri?f;F.3jeUeN6`Z/ZF!U+@[2[/'Nm&[M`[-*^6nE5Km/q*Fjn/F-2?X\1io],m.=Z!>:=@.kY#a/3p3Y[_dtTMe*B9
%>&bg_28iO_5i[*'R'#6*nnVt$2AG1H,ss4a%S1hH%iU2C;Pb^S`?RBo-*7fOItq,D$^V^Y@auHmh@hS5M4;eR>]^8E%q_K='EUI.
%=W`QY7Zf#<;1jSlW)f',c=nFBnRrntFhhquH%C"FYZNt6n3\4A!B_NGEpeHLG`58[6,5=6K&CNU;$/UT:T'<pgp%j1rI\-Y"\ei(
%3Egn>JKalZF"P@F.bhn;0R)cgieT-t1.C-/6$K]3,+cOX-?5KUeQ@N@Y#ZUF2l9nQP=0/`OI9MZTS]GJW(uu)&n*i50=5a$jonW)
%H*W8Hac6_T"Mu[^T#6.:)0_G]nW6&pmCmgk:K[p/*#9\`'21o)@=X#$XJA:n8kh<"G!+TQ((@^3V(5Zc!i'6+.;$:K?]J+u16$FR
%n+gkF!G)O.`+'6!WdiDG'*r$7)D<=VJ2C/K#Sk2p0p:VW8-,NFjaf0Z2BMW\'/*KYf-*iN_m1Rdd=CiqnQ;/-i0ag^cT-_r0SS%`
%m%B2W"][hpN2ngh"Cap8`1Vt-m@^uJ^0'MaiR+h:&9hKs;g2VB#l\@Y':+[c<[)P1MTK$.f<,XlZ8<>7!@H);Usom<hh0H=9kBfo
%,1`/AXZ.M$!sjW/78A'.h4_(PD(s))M6'1RlAD-5Zq%DI$4'1VAJUCo<g6]a.#NV/'abYH6ZA>>P#eZ3^mYX'`9kJi)@uDdI0!Be
%iID"VFE4'8%)/KIpZ6rjE*`k^;9>7ei(%`'8RIKKSA8PfZsD3*ZMf%L?P+gYYj?r("U)c=9&'bO;N9AdpDisHSRR3/0OYG!pX%)1
%'qRfT@f_UK<i=g^9sF(AT$)2F`QCU4i&@n#**,qk]>W^&*$3km=hT>5`up6jem^pPX=D(c>$K[4$tGJPZF4:r5Vj,*L@V,QQN4=7
%U)oecj<8VF=`P".oo;^Q29H!31BM9%Li`\0*^S5MM<1jCE<a`E3M.;qf\B8tQNE!4GY!R<(tKBmY`#<6i^FpU%+_(-ek12/7Mi0;
%MffSA%\dW.c*_4:O(,nQL)+/S6$>+3M6(1n/^Fr2F4eWC8Lib8%ImPlM5@$cVU0Q_mqT^SDEKs*,PG>=8gQcdXV%+)4GIIMqIb-f
%:u@Z:_CFgLC7M.HTdjW="Z`\FZH$'r%^+-N45"J5E@0Z"9k6,U?u,4[.tsHee3#RE`)"AuRQsP2Z3;BQL5E!K1U'^hE1]DU:q.qi
%$XbZDV/3e0<e@0\^iq>q#uXfA0SIgnd#,'2-sAM2;.CUn7n.nS%BdTFi"A-^_g5"-a$N2k@0nK-`f^Y+21ukJJmYPbJcKmjYS8-o
%$*f?(U0rml,ueEj4;_,I(3<uJQu"X:'G3LdG7&,YYmKK?+=f45%?OW7e.A;dnSo:JIS!nRa"hEfYnfgI2Y%\I_tFZKL)m*6*!3O/
%,S1-\DT<e,WI?$[2j2Dsd"T:k5SgI^:R3Q)7M9N+.ThAj2[sW;dgG04Lge6m*?H:B_1G%7+akAslSf7ZMplDI$S7:TJki4*3H:l4
%B+iVJe/&KJ@_^G*U"iHp7Pe.h242<+.sW\]&`%mLN]7UAIVXtNib9e#lA[hl^iD*6a6;GJ'8%#]SAcS_<I5FsqEp!+4Y1!W%"o!3
%F=C>aAmF]rN\CFsGq.J_>/o$4;AU]_Aq:2f7kn+^dVgH2/;NEQUh%A\%:KR$N:@N]\<0*$<tgn393/`n]+s*Q:6OuVSQ:,oLNlJ;
%,Ua`KEOhXjoUEuj/+9q[%p?i64,J*&7pX8Fh:c6L=-L<9CIG)N?F`8LlC^,(`$*'G3r[%p4o1fk<rW'Sr4TR5pUoVV^#b6g<W6<,
%jR5=Zhi"6%*6U<Nbut&&V0,>B'dJ]OmsaT,p?oE$e?=D!K;,tH`%jtX(fB-65%;I:,K^r,!JVob%;-0Xp&[]tK>mJPL6ZttF]`oN
%h$;ZcRDdWdY@^m^pK'P[]_`NUk&AE2Sr3PEG7.HRlL-?g=m5:-mU#,F3Rus#qWp(meZSZa%!f!UZu7\X+gthK3DV3EV_Ph2TauFe
%$HRk(!5dEkS5lAA[=T)=fmsr'5_K[CiY/pDHI"T5[EXkZ"eU;("?W@ZZU&Dacc9Fr8$ZdFLm,Xg&;6<nlRio'MP4`H.\TDkC<qX2
%UmUWrCV]+0EZ_"KCJQlUpp>buM>RYHJDVW<4='0g*QMYH/re5<_rjI&EJ/Kt8K,bs["G#J`cT9Um8tQTbR!SiNg9+0D2<?l9caBX
%-635m,3D=K8bW_&?VEOD$cI"3Lia2*KfP#0ANT3<n.E+Ho,Smu-&,!HO0OMh#hrdBT+dV)[_pdC4F.tk*N<c8`=]Pr@o!;-!(4-2
%@h"_d_!IrS44J^:l&`^uDM7EH=]?9fAj`rC'4qTD<Ze1Z5*SY\,^7__]%'.b@66StVDrmTmI6@/_@u?Gg>UQ`M#&gmaP@[XPf#:;
%R2t7tpR(ngd]oaeA9NWH'Y,o,K^1<60AlpT_j!Of,)UArEqo,@c&Zlc-%_a<O)c7)KInl&>fW#j/\)Ir__`?kpR;T=%b#i2^KfNe
%h)j-c[A2N+\nL`g$u]e;0kX),=JQ3ERdO4-_T-55lP*DE%iBoENQsUtLh.Hr3ON(mK.kAn_UJV(&:p%\O*='6>+?JRG$JOb$63eW
%E^^5`Ip<_pH(sYoe7l4OW7KZ,E!*23dG?,EcN4-[Ld`)7MriF!Y-g?d:'gM98:Lk7>YE+MEWA>tQp)QJYGpbeAZWB+^qK>>-Qt;>
%Z75OTKs"m.h%NGGLt@p5b_J?9_^&*t/2'1c3$.eU$SJ"+p")3GrDU2IpWrr]8n!`'&%9p]GdLlS)O-3"bBSjbg+ke\6jlNnaGd3R
%2[e$aKf"`^*^ddX:W>"NT^]c@OXJJL$)D$b-YM/+L%(ZUN[&c.&<-m?KuU#$3Q=84_Vtoj4RP[i6\gHgGh+LB++\IKOLp]akK/E-
%UkS!uPdQ/[g6NhL9Zr9;SJ#DJj0SL@3(,%D:dGI)VT<p^0MjOeZ"\71%j&7fFrhE;p]5jL#6RU.lBN_B@3muM_-tQK\#Rf">le8-
%&]0\3OX<lq&n_Lc%i.@em0#7uVgrT5`H\^(,)^Yji)-<3,Y7^g.8W^H%_8j7!3#7JnMFRZCJ+)i.2MCq="7&M0sEAH5"LFSD#aP&
%]j7Zb8X>rn0@52.2[tCI-h_E>QVsacJca39bk4ecMB5&q92nP?beKK-cSFD@7%D?BaGd(_RRRT`6s+9_gYLY$g%osNG>XU`;9+.&
%<O[TE?D"U@Xp*)_O;68]k!7O/+0h$!7J^GeIBlqoo/XX>,IdeuM\d)jpU01+bn.VAQ>W>oHeq%kj\u,P4PiR:Q7-??KK]$?qnpn)
%WVb!(nt'"oJWC$a\UkE`cpI>]qYt;%:0?Rd&5oJ"b1Pr@F+.H*%ooQW?p9qqHst]8.DRs4jFj*7:k3l0FE!6rRKs^'A1TZ)1O8[V
%_o8Ysa>.]XYA)5D&u\oH(j,<HHfe5_M\e7K/"JQFn].'tGo(r`DK,n*o3s<&fG#-EA&'AZoA**"necK43mt^\``\3;7V>t`>*kK8
%M1cVcZZfXNj"2*ZRCVmQ//J9d5FoUsPO]cB1tV'h(f?VEc'R;Y3bnhZ)K#gA?_t2U=8O$,k<T!j68X90XIfm&VKlOYpZJ%spt:jg
%4eHe(nmj3Vq*qi/eD*1H3eoAhVB?A7Tlfi\X`n@;(pHi-+s3k/n!uVIO6X%Al^PW8`IN'e;J0uH\gL@2"jhIC:tWsE[@%2<=+^*a
%.=UDU4KF$"=h4X)niQh;CC=@'R46n^C\KFPep*NU_Y#m](1a2MjdBVUh!\Z8G#WVX6WUQ#%qL.rES2D5TE2o1XJ+=i&ll-%98rHU
%[q8>O'o3c>4&B[u^O=A!XbI@qi5`GJhZ*A)g>,17hiVRK@8YhYkmU=+2tu5tE:;S+`s@2]7p8jCNFdTY5l_V.]=C2<PuHJ`BZt<l
%@P6Z6r5m_1/BE`./g;I\-%VA4/$@YSYc4ILF7%AJ*\%C\V:qK#[F,<@FW_-GbYbIUe1X8V7dW5&gpMRkIF<Wq3V%)*PsIT%;YKTM
%p:":_V<)[t`]9n$C`&SK]eRea_gl@QZRU)VPXDAS;@1$ONZ+oT89CNQQ.p?fV)!opISHrT^]b/7\F3el2*_-KIioadY'MR`HS;7r
%&4PF$W8-;7U.V*_Z&gt2!#\TQVcCkE&-3se8M:5TKi2/`E#H4Do=O,Rq\I`S\b95tStebDJ\_MknK*&X$7P.d9T-g0[bAWomSI:5
%@+Q@qiJ".jG=e),&\)EA;Z\e/]#I)*BV+O_1qUel3d+3Iri1P3#5bc?ed=*eD8#\fUSQ9*%@C7>==U\I5Vg%@8`&lApq0lPNJ*e-
%!"tUPAB];qC0qm;J,s#I)TjN2VXRNgd1PPIX4=,UTrsK>C\!hr-]ZO[0\996Bhs!-Ht4mpgKrf`+a&?:7c6&2QSAL[ZAr]:Qara&
%,2Cf^%[aF'lhq)^VKcrQ$(>sT)47pj.\IN;!e,d#Gha^84ZI)AM%Q*foMr\M]m7Yj/VTg(;"(]X/1u$Z^b?)IUEZIX-=U!QP6Z7t
%9QD5\KU`oYc:8N8MMmUlIVJu3[%"+M[uBd`&dR<#Dhs^Dn,\-EJ_j^+ReE^5hgT)4i'Qtup*#PM`Q-hQj)uD!M1aRa*pZ4)ML7^[
%8/D,9O^NTP=-pcUqZF/KO#KDZnhR58#X]?X.q0o<Z%?T.4h5%]bJ4Y[UY?HP-mh+b&6Z[G4k@.L<'I2l0V3^gf\Z2h@5=6.A8NFP
%BMO\2Gs>o4_@$SjPngQPWIh"gA%QX5NZ>M`EtPW=OK3^H;)6D-W(%cj^#E1$8>KtA!Fd(Oc:`/D(0_#`]*E.Efd^2"$OG""gs:a:
%9Ckj1KddhWeMuXCJ&iXH$d6EI0I0bGTS8U4:9dTV0b-1?#bg]Zao[snl&e@b^,_"8\g.*;lj)JgMu3'YI9&3:LaZ6a>CM"FZ0*3/
%TbQqMG;pg'YbrQ<dsIjkXO"12j2t!T(*YN3Cnc-i]mjIiLA-H[mXRf[HI\TP>sFR$3\Eg_b>_dZ@4Vc]0LNbl81lC@KH0>"$&+pL
%&:H%uYNV!dYSD8-!%K--aXM?!:enooB.unsGML&<\Mm8XAUY6],4Q)-$*Bh[r+!_sDBZ??YG6-b_V+XU3mpN3Oq;aI9L0O.fG6Z%
%U-0L@"4;Z4Y#WC''Ds,Wdl*6H6E?kI:qGX-Gl[p(g!`K&2#Q-W`(k8\BFb[l?j/if*\h#$W=!Zc33]MH?^r-]k,@kpo2`MbrJ^tV
%X9@=V+;%`&)+=i:R9,&/M_@\^g\ieo?JTn'8rjOcAt[s)?7G<ZdZYG>br\OkO.d)@'4.mfMhG2%YU^uJ$[u,7jI#"Q?eFCQHX8?A
%We<CfPRAdnKi2R%(%*.XQW<``rp$$N(5GLi&\uU'BYeQFj$6(UWM.!#+S+[Zq9^WCUO-o:+s.=9"GPJg^/B.L&r@XU^V$[;S!^4h
%')%fOY\,.iq1*"2EUg/ogVi1275`B.7Suekf`F!Ul(;UKn&KlS/!O?rJeajDaC;GW"W7^D^&j%Xfkd1$HfB"=Eb%"Oq=p(cQ0i_.
%?Qgf>;Pm'[bP1Jn]MjE^V=TSLme86fL9<$J/E:\RnIrt7pmoIOk\J`uAOuT,BIWPQ!*2<N4cFYt?)f<T-<no`O^k<&hCED3i3E@^
%-#I1d'X6KpI[("F:4dM`VX/BqjYd.F.i-Qh^utgc&9D*,4/5"4+F58:Ju5.<";n[?5',[@YgX!j5)^T<*bmWYTiaaBpMPFhg9;:u
%CSd\dH$EA:5qoo+k:l!3ohLGKnS(44B^=cHm8WY"A'P(C2RS=f&1<S%3'hd$j/d?5%b0k#,CkZ4mMM<q`-?$J1IRL]loTP4lT^W`
%6Z<5!U.Xr,#CutIXDLa<0se]fjW9YU.gU?M4XZSm_;dr?`ZV>m*1H/?:6\,XcWK*1Pb]q`12f#]+"tQj28ldW%NLC_/hRnkSprMD
%LC>C^1MI2>%*IKQLUG"Z6&_aQeeg0rkZ_b30%>eZPe(g40j:u?EE"s3L[&+(7laT`lEHq8$'_`1I%aYHF6nY-hs$39Bo+s@V$F?]
%3/*;#TH\s[AV4?]nn8kV6b8mT$7&+kp(!clcCZ$hSY^0kU+mH[k`UrnWtb(eU9J&l+?<\='po;i3#W$2EfVE!Sq$j-&c&@q1!3/P
%bWC14_)flo)!67#AGs5:>nLK*fYkhePCs6%?Wc7=,nK&VPI)&5Zc%L/d#M-l+4\_@__;MUn3]phEO\\Q\n)]I"uFHd+b^XmLo>df
%3$s_l1/`VYrE+'gQ#jc3+okX\(EbLo-R9uNfscY'dpf0^l!(;0Tb&[.^%_\4RE#s<Lo-Z"-e7;i;(HNsSk'M6lZBo&pfXP0fHHp,
%CFp;q9'GEh.r=)FJp(QI5>W$EE'a!Y:+b-b:#6];dkb?#&S`u]D(bQ)p=hh_QSC`G(ZE5iecu!^7F@0P?2'4[8_+3qh%At"T[pYL
%`#:jCVULcK?h=Ln8of;BP]8<93!jAT"8"j_n4NP7aO7K=4'WDTUrMIO""8j;P+/3'[ps[\rE1A_quF+[7BWCg^@6"Lf?/BH*.:T4
%(pP)*>Ta>m?#fZsYgBe=+]>7]`7<+kG5QSK(NW'6<$9a'm,m0KDDoLt^Q$J3O@[95T;8C>5<sI(>00\/#7"c^"r\JqYBKeAGf*dG
%.,#E1DL4;9l#(lep=Di7%l;52&[]_=0-;,7<Bo.b("J62@QRF=RREMo\k7@W#;bWC)uo]pL%+,h,]t2P7^-M.;-cI'c/q6]A>hM,
%R:*Zk;H-Lu81l*Ap:IH3S+&?H4V)2[V0cZuqc`2pRhmd+8pI@;geC9)qebpij[m(%a6ec&iQ0tpb`IsO(9e7+@iPN8/@OThY1&U;
%LMhIQ,uVcVi]uXVXPUVc.lQBN856SiZ"N&"dWMs:6V!B[VI?E+/1L?l9\,\KhdlBTQ+Y<CdqtjiQVBhPj^^Z\Bb(N[e`k4b8Ob>Q
%ioCu7j\A;H)e?R;E^EH?O'5_?SaFo,S*M!g3U%j1q]TOH.?<IrMq;&;MR70daY#+:'[^"ggV(.LLF2_'qdc+&ol,%_>/%4K5(7bt
%]jGaIRF?)4m[kldcl'u!b6oL:T;D?'<o"&)nDi8#P.',IBQ55&H%fdQb[D[]7:>XGUk>7PdnjBVJ&K)F:04[r%%7;FNUZk"kK*6i
%o\n*RlWsPcFqe/nd&MHl_EL$1I-iT54*_jpOPG'Y3p\*KchBKuB$R!_o;-a1V5h7cMM[5Mf-2^Dc!0sL9gnsdY;]QN8ZktN&)3Te
%n0T_VNmH(NkOfAUg*ufN9,"cRC&R5aF0bi8Fu9!+,T1H@TkHI;`G%CIpcA!)PIGuFs1hj2!CqPJU*j6fW]bji3V'fp^?lth^$.bo
%*S&;Fo&9<rBYte%b;XA<*r>C&f&)G__"Z<k%_nF:kKeNi(-d2uQS)-s-t[k4"+GPP-t=)e9i7q,oMXZiVu:c3mub)?r#CYC`_,cY
%n'ShCaTWn5J,dCOd+c&#3r6s6Gr&^!,<+)2pWr'F761D@(#2/p(XD?F/*B%Slf`C2?@V'Zkj;T"5E!:6Gku:SoDe`;ht9u#41eM[
%8.^P6Vi.tbr37Md].Xe3A)H`g$)MP54[Ck:WmOBgdbG&cA5)DWboTTJnp(,/L2]D<2NOA*T7/k6G3cY<cf#ug*qK?sk]U`WeX=+#
%V:ll]R#jLUo,RW%HJ?b#N;[q1.KoP0@$WDOFR]9\f9,r"9PL'6f:2d0PL99tT"f6j_<80!D6U-RrLREZ0?2nB.g_fq^G#^Z4P%i!
%(B4On37NK2Nr<$53.B%4s(2VYDu$ZQU4+0VVZO]nCH*;WpA#-epG^+OYSZ*IO^"NX8Z/(O?SAgAJPY?HEV6@36/f=)dR6AGL!OD2
%H&"b+hWTTsD*QQndPQKZW$tD5>P3[Y)d"<bF@7WHO@lm^WV1T>6ajqk-8P(]<^&o5UkYj]hZH`H%g:e]6Z`_\EdA3lmBJt<gWN-(
%?F@HAEfU/l=TM?j53Hti84H6r:?`28Ju5WB&O$H+l<;,.p\0kM:"Igcp[K7"ke*n4nJpSrfWh9<aQHs64n+L+pHJnqMdV`5`s2DF
%L`d"Fl5diE"IBiR6hH.^'<Y9hW+a@Ogp"@DrE,Y]Q_<&cVc4r!VQhh?\iB!Kf.IRk6<G`GB\+Ctn=Y\+*EA=p+W7WDh%'B.DP;$V
%cqL*"*CYS'@SM:`A$@';o>U@lejB3q^8/fnNnCHZe+i174XQ(u]12+S,V5oKMM5]aMV4#KB69MN.*hunTj3`+19uP)+alg9L!O%<
%"AqV5n2d-c>WELhl>Jj%("W1A6COj;:G,"9Br3grhT92i,b[mu@K&8`m,Z)RpCQ3RXeU?"fKfdCh;=,[#`7:,e+[36T#n%+Dsfpi
%..S:I?=RX;6$nn-&*ElVf+EN4/o]^#Uh:D`E2WufPhHYi<_C+"V0_Xke8XF$')`??`a>HGX::pt7-E'"Xc6C<V)2,I3.30]MoD5"
%AUDR1HcV4P27frji'Ynt+I^2$e8jI<Ib85'*=UIDkfRN8!h00JdYe%eMsM6imr&h$b+bZo8_(4!'`A)874Rad8tKdK7km<*;?qE+
%(MZQ\d8tMK-gBP(,s9r)$*9jlZj4A[?"')e)p:c42'2IEGuY(?Zu70YjBO+MJI](%_B$2Aa\hi1TB%5$S>.ATC4O/I.Nn14gS-=L
%Is[tuVZdIZUcD!&FJ1lc2h;S`b?-d40f;=FA/nnY$-$#li4A+eS)YUN<l$NfNEZ.)K\-nFOQ%Y6.&#`KKB)@L&'E#7dTM?sDh]rP
%/>s(k&'lA@H*F8tGWXR!;3K(LrW46pqB!sE\OZA&!SYnXh.-?*e.Jd#5*tZ!.Y,#3Epe(gRtu[rleo(Z8R,pXq]V-8T5&TX4:T/P
%Z%*h$FF\(!'J[+*eJPl5ThIJKJm=?$6J_n?&M9-C\8iNFAZ%XkEe!o%P5k$O@mj6_)@JbX1N.%D$CBcFb*t\MQ+G//EZIUN\:ifU
%,MTd%L-TL42'Qn.@3GV/.b:SuN$a2fY:/O&C-/'T5RYDN&(5SuhYoK?PcZlC>AEPQH,gk[Q[#'u_e3r'7?IHumN36XhuC[ckX<g%
%9JQ^+$K4PBgtH74OG[p98othp8tZRVg7kE[A%ih+])nRV!#8*Bn%5Hn#RH8S6P'Xn*r'9,gk.0BjdLEM-p#Lc=aYRE1NMr<%gPMQ
%cG-r+rpY*XKnWq!lOTN=?#R0mF(g'^lb:(<8`TkFIQJm&C7[@_MQi"P=W+:#?kFn0MTQZdg3s%QYfL/fgACR<iA:;(:Pi`!6dOsp
%Z43c!M8s860*cET"5u*73MSg1Wem\)kNF-pa;=CM(kSOPbn+=@OoB\lqW"KKl\@G0?@UuZ^#@?0B$ScD\$pe*p=DT,&6OFC;1e51
%FlM._s8I=Wn&Bg(4*D\1opa9[^RMVjZL;4b]!t,"biM"_a].,LY>\k"plsZri9!E@_tSeU9]NG/l?kCIgDlh!m<KX`jNSt,6Z;,V
%*kJ9/roWD$?gm7NTf3X05KiY&cdR>,:ER>NGf6>8Ln$(i;us>FVqRFf^DYV+"RqXmCOQe`TPHt$64F6bWiond[LQU*Fd0'OPhpof
%FI98@cMRH*rp'u`lMI0E@isU`s)X:SX5KY>DSAW5ERjBY]G\<LkA:4m]_<L4)8%'^of&I`nU<+*1&V?Y>RBQ-S9t^+o(d?`NW7n5
%s5L;t0'W#;Sc28hRJp,H&08rt&9.FSn,1oT>^jS[poC:ld&?rdoH2F'i*h,qftZFHf^bVITB0sY2un-MF3k'I%bi(s\-=E`Z+udd
%?YPESl+?V#-j''4&q9CC3,]!sDnbbdf_P'Y&_t:n=Cu)BSmMe'q+;EjmiR#hH1gbe?U+A_33V67KdZmY,;(0PeurK<_o-8=qt0c1
%TJ&+_Ijb-m9BY*VZ1"kbL?Ot[qZ!YXqZh5U-'n+cSb"mg06<5OUSgnr"/+N]^%g'I"!O_3:Ho08>ZT.>DgXA7B&gN6^KK^n2nmrS
%cen_4j1O72RucE%oB$G<4nep02Le*KAgLJQY$[dI^PRA;m8H/4h`,P/TBj/;]AiZt42AYQdA,gj`^0F4kP<4i[r^CWftW!pld4C7
%F-"%<jj3CBZPf?!rTV&,Dt;.#T?m)j)rEmRs4TG^;]A4-JbDa/rFaqG5DSQPO7BlVJ_s(SrA:nch&mlKLOtG/m[ms-bgT^mUYPtT
%3^J*_eKlXb1W6';V4H+EjE;]t[q't)1Y\8gG-R2YV!KZH7)RenRB\6`c_.TeO[]A)_%)Je5_"bg/kFucN<Lk/NY3?M'l>Ka5S=tn
%RU/fZ#lAs0?!Jk99Z]LuVg-/GVX"p(cY.5?EWF'fU7?r27\ue>qg$L/]r,;671'q;:.!a1B@s]T73e%Y)Tb/#]'q*1(tDqPW<T?6
%./-"TG/2:#6]5srZs\Y99_oh$<2Qb/&,'Zm,,5M@(7MBBUh4.:+[\`>k<a*>b([W3.IrB!58RAmD<Tb[/kHO+V9TX@5p7qW3$<o!
%EN9kS&,E9f8B0@G]gEOG,n1D*[&4EZ(Q94-7BP#J)H;urB"d;f`.1`b!A^<_\7e-6j;QdLSq*`+\`I</2$PZQHNd&O]tAW93E4<l
%U1R1`Fg[GD7h:T+hF8^nIR2WiUIti-3`oeg*Dn`)d<6at6uZUg4j[-iK"T5Z<g*Kr8T=(Rr."jg8>3!YiG^Sim_/qV'l\2*oW1X*
%\.m+@r*Y;KE7PId(3ZG>=nA<t/o%S:9Dl$"pV+*F4Y9KW>Y"C=DZ`npqn@F=(RkE?@Fs->GWp4=M+W`V)&a+KmbZuj5rL@Fn)2':
%R,k3o;n"2YhSKF1e!JIV!7<q[bB]#bIS]#t@0=@k@V5<?]:\2rJ$:6rgY)dMpk+Q&b`UjTK67kEc4Y8AeoQ[+\GLJ`k#<a8?c+t8
%k]arl]9YYes"AIUMCm7GoFS#&p0mD99L),CKd3-TE`kEZC-FIW[^rTK=:lDp3X-c1Zt+0!q32]4-JX6eJI\4[XrCm_k"Fnf?aU[e
%,9TpkX?q4fd@Q7c2BRQQS4U(45,tHQoiC8EXBt@YJdCi`kWJgX%,$=UK%&8U*V'^d0fq7"]"MOl3pK[l7_oWh<&4!$$ZBKg.kEk!
%R'<\0n`GNr5+Qtm'-n=?hCV?TKLq)=OtjdU3h;E;m,-#lBY.-kiPGpH/Ho\Z)VC.'P0lBA-e+SG>`s7_A-OZg,%:drl1Vbil@eAg
%odb`BM_nX3p!#:X,6o?k_\BpFK*NL6ar?KGK5/N?KC'He"3E?5Xl"XG0^j&4+s(Mq.ssn6@,Ni_A:EYPDYm^c4P-CD.SLYq.'a^A
%\Vjbn;nV^Te-9MBB:b^o/5WM6FHr*u6/A>]+O"6lSQ@a97s$4p6H.>t]'ABJ/jRB!hT,0')EfWL.AH]Hkq+dpc=.*g`]`,CXu:,T
%<]8[+0pm^hZ:DeccW$ndI&s+(o)9LkId+\`8>sD_:Lo@tLSsYM2!Rb[`Y6?!@$?B'4@L]'X(QtP<JujK;CG:bA9rL9`J'M6!*O;l
%K)K$@fYXFm#P(gE3C>;k*34_a[:,^Ng4O)h#lekf/d,+[Wd,R&oS#]%Q^-rEG\4FZXeL3(SgiKiMH16=?XRhtRLCO<gLtCpdN,,j
%C#HMq/%",#GKcG+;*t8<_0S+EV?OOQlSR1'qY&<B?f"TBa"P^.cb,4Q#nZ9E!`m7_fFCJ=je/ZPk]'BQ]>WOV+P,l,>iuN$a%n[h
%;%>53[jfZ/N(fcj,oj(tE8DXqkNU?2[l1hYE`G`=gVBP@3a/m'TXS)3qBG*Zncq2r,hX&4#`>41H^DsCpQ,+>9@*Rul/>pB\jB%a
%=lrJ?Z8plJ>qgc!*gf@\2KtBgK3'"9S*"]*6lP^-gG2Yd9mL7S/p\%Q\3mgWY=cVH/2eHb:kH^*&!N#9N[NEn_ksK42?;j(&^#G/
%iZN479=L"E%3QE2Q)*aC-iEb9a*p67Du]aLaH!V.S8l.3Q.%]-70EGONH#*f@&jobi+uA-ZfJZI_KFgjo+Yp510ZD+OP=+9fX4KK
%6p*V9G$Qj(QNML:f+7c]jNOKSN-GlOHhNYrp/OB7"Tj@kASfIi1_0'g0UfV*A^JL1o0_3-,!cCP@03^/KB:tHm4M+F+I+Ms!/1o>
%0G%^t[$m\m-Y-==!9`T)`rWf^)ajkMV3&as=%#qG!'B/A"s4e\''DC0T*ocEq@I\Qi#6A"3CQr`:>0On=.uOkSZe[J*C2V./N!pA
%_M0bUf%FL,&7Ta;fL?18ROkINT-riA(0Of(6SSUtY>#"JSFN.]WFTC"\hY*l?E1R\U0TG/s0C6Wog"9D6k"d></k8h'S@/dq?PYN
%3WN6n"R^uNO%F^43sQ;.?oaj*OcidB#,Ohh>Aer^-!6Mga6AEBS+V<9RbVKj,%*p_D.-K!A[QklKmEl6b^0kZ,!0nbq,A<JM6$uR
%;K5f8XFkEU#s:2b@lXX/?_"WZb$\RQ'4VdNaZ"E00b&UJXo2RYprZZNHXM\q<9t6+:bJ3`K=`9S>u@hAq1]5_9RMVFN\?6<#[c4/
%!L<ml6/*^Bm,<F;,&p&QbkbE*Nom25d@@c92YM=uCW^if]EneleLZL+e[*6$$<rQUA@PKaB"sJ,S^jOCA[!D!VtN,5#]duMi!R5h
%pgGSo#)\W4Np$QS:@b49'i1E.`_omtZsZ=gMj\@6.E,(W@\F*^RPNt,mpIf:M8+)T_1T7OVRdF7D,rAIs'V:-)Uac%,VUV#1C7dD
%OW=Qs%Y>\ZY<\)"^I@$nJj9W)+Xkc%!:%3=bq@@oI#:D*StE(h^o)_.3+t^X<PNaKIQ1nlN%*Ij(Jg(X"c!Y(@KjFroN\[_Zm:<V
%3$/X^^2)Z)Zo',-A>M,NjNp.p3BSbYCd9RkiO2gm(YnulYW`5/[Rju[$5dl:F>@-c:@U?)TdHG)\ZU%`kN&;HiVn0jk^u;p4N-Od
%'-2.TF3%N+aDMRP25St!X.NL5"tnCd+\87b*"6<M%n.,b]2!l@I*FO1X;]`ir1^M,`4P<EKtgQB6We)>,W(u)AD:In6D[3gnlkp;
%628J'o%H(3]Z<&RSQ,eS9K;Vqb,d9^-K9"<JU`lk*m-o$c_LtSF.mq)4V5Cp<.^6Y$OoK?5_`/L?VIed]l"&2$^'?D*V1e.RdTA7
%X4?9N3C'#XcE1]0mQS/)=>]no-RBT*eItp/;Bk9/->D1LHGs$tQNOfk'5LSo=_(?.'3u3lr+Hf3+./]slajq$U%uaeb_"m\U+U(5
%P/@@t^IStkEnr3!$:miiF9kf^$&DR#^)(rM_B[40ACQP49H)NbPC,7gBLm]r.%@X/N@#S]-DWm#_TlhV*gHZFZ1-9j<%P%j!.a6%
%]=:e[5^Hop_MA"c80,.I]X23Pg_18[cuYZk,9-@7=<J8EYN"&leKA^ecceH9A4Rg'KZW-"^UOP*hi:[2SMT)`CJ)'n"*,E/Sd$Cq
%W?![k=_)D%#NW@W[,Ue9mFo+8fWYe.XE)uarG!KO1hb8UQtcM'(.]W^GN?[CG3'anmWg%6=HD[b5/R$Y_K1pbYI9[?gS2.1Z&i@#
%QR3!94WWZV+qHJl.h517@2cmba&<"2<-l@tYWDOTR.8!aBC,SHoQ"2fY"_?1ll7)3a+I,?AE'he.ik50jkD.MRH+B#Rb`0P;ff&6
%a-,>fQOu__c1,tA]%]-VWi&I,!-`Q0Kj%:$9/&)Irq9Jkd<KO!.^#Lj3(=\MhB:Q7(b)/SHPU#Kc,>=cPn?\f8.*#c[!+MN.p/Ss
%R^Kbc0D[-`AL[44K;+P&Hn@d6`*K.G%]k#>ZHgM.6bR/XBGKB[EReA-;n4&.ofb;T^LET(67?Do]sI7RihP2u=r378DhS`)B`1&P
%f??`70"O"<hArE0C6+3N)M\sH\:m.e(`T0n!!<s.:d8'`+o&mJ4n'gq)+WXHc!(D`1%cBa89&quct=>Xj'bH("McYG\CSuom(mj6
%4tc)[n)L$f2pMMQ4G$Ik*"tV>poi<\[LnqG:-t/?3f/DrUA76G;W;#_4t-Vpi4YfF6D(3^"?4eprGk0"+IdI?(P&T+d\ICeH;0)a
%1h/lM'E<#UYrmVh_u)'a$A4R34$#%Q5Gs,Zh1FC7iIJ(bK.f3M^m=!pgHYQY/.i-239**kpPa2>!BkR(i)UH#fZ&fAkGgHB$JFc_
%-"F+cae5S<F>B`k.f&7tql1R<S*ig7o,cK09!pA7r@'fh$gq\up\R]_F$:4k%SH/"8uEG]O5Z]r=X;AeX)RaOopVS"BEe^>9`#tE
%qOE:eM-s8'd\[XU>f9\gdf&>81P5'dhc;at:h7/XW7r)KQ>\2%@l3'`i$h]c3$F(@Ir$P(ade)X*C&KKoC*fVoBmWMIN![3R2V?@
%<chm)^;h9TkG[1C.4*s.BpSn1#I1q)<j95-g<V#^_60*BH,WqM2_I@@3:([;D[@"nO!q_q_c`^\1^Va63m2@[C*LV1OsIr:^cZ+n
%#Jk2p\HCT@4;JM0?>)RdY?f40pHU?p/&29h>T-"V1URN!pPTO9_b*SgpW).AafpH&-HhY7*L*F"QfV[!)t/Kj4,5MC:=Hue%:kob
%YkZMfA[bV^./+^n#b=JodW(nmNJ!N$4<@OpmflC2&LM+-eN!+I":tXb12bO<V*PG09S[Z,jHV8<dNW0)iT"uXqVdd#rSH6!qWak?
%@\t4D!s1:.lfcqA$KZoY`RKS]6&rkOT;q!`f(haJJC85H9p:"ALQ*`J52sd?USFa6Ku6&Jq$o*LIQDP6jhO<"nc9q)3)E&NCHs5-
%;R?Y1js-Ka!#K,c_22uGDM?2g^N/LI*TJ!.Eef=hK%qlEPRFC31Jg^AJZo.*)7C^5UDAc^@s,%`QkZtH8HP\:-X8W3!'WGi?1TI3
%28Z0RB!XUQ<6)t<UbIM>V5;<'ccS5!_&^cB9Fg4djTH2fpiR3L@D5Xmh#!*_,mpUn_HVQ<JKa:MKS!+EHGRi9692%-J\f2Ke_@3/
%G\,p`nZ+Z`!T[@L=,%,nWF8$dnm%dgF$KF$EVK3RDQ;bU[LXUVOGZHo548BgI`:Y<HB."p8T5%73qB6:A'=^hEDYcT$#'fe7f](g
%!oh4d]!9_Fad*r$8]LSB:RCUT\4!02CL"U--2NA-(DaX24bs)Mok21M@*cDLL=4c=n6_Pc])JiT\WmH[=1r22.4(h^i!>9N`8QVq
%/p`ls<UHHRpc[6N7%*3=680/4_mcL*Y>Ig";oQDqDtDSTh3<*to!L85m!ceH>m"kn;M4oLp--6M)da_V?S`2j@4M-F4oF9B[YI(l
%;'W>(eHWI5^^gR-*gb%['i^9`3Nk9V"!R.S,a?`6I%_*i[t#=@g>BN!pq@./HR&smr(Z3nXNW8jL-iC6%&HhM"a$*!@6[p.gJ0Nn
%MGS?LmA^ICB6ZdD<D&Dc`SA82</=b#V(b[opN%?=ccKqG*.jH?VW%hR$W4O_?KS-]ot!T9bqiI$^o4]b\9sq\<(&bBnfBcj:NDVA
%N81h3%5)@l$.)2m\[20qH,t@RGOHm9WR+C.9!([;8B,V=&`\#rAhT+>mHY!$_k^Vl#:K&CnmEad3B&j]-i<gYr(9[*mpc5R/N/[u
%aq,,.03:]HMkVjY'2tRt;aYokboc3iq,ehoDVgO$]S75RVDiP,)"V3$%?dLiPkq&QJ)XO_%uO\+Ino2GDQ>:A'Q0.a9S0"Acg'^.
%ir#P:GdtnsH(=B\e79kY?/Z&:%Qd/H0#KuFlB.`=Cqf4#k7A()hj6Km1,e9'P0?DsiDsiIfk?)W@%0<NmfK!;KqjF\Zp!NoF'bI9
%\Zh9;p$f_,Q/H!1(ng`m!(R>?)'/A\ELeu9)<'!6#GGIN?!CqP+qDo)W+g\CqESFC\3G/2[HSpbgW*jfkATikelfT\%ctJ)!<)ZE
%qsC=XmM;5;[E]Z:M[)G;/*;M"5ogGG?k'R">B*ZG&ZuS8/]J^-*]pgp?QnaE_e_s(nZBeKHhKEff9q<1Z:"d=q]Q#-,(B,_oup^+
%VEr4]GVPD(IQ!"pS>I>)mR%"L!qKtTnf!)X*kUFA1">JALl-^`Dum;pJ5BeJGXVDU+:7!;XUSh<7X!gI^("Wn8l/0+-rTg]8>lAF
%BH)KL9$Gb5I:h;E5;bL]loe<eX`QBDU'$$uU@kmU.h1qq!V8\Rn#VDm?ds:*$f?abHI)YJjH1f<)Xe#5A&H`N6"P\<fY@#4H`f4(
%i:tO=G7-rL@0C@mYVu1RZ!'d*@ntQlFU>>u\VtURTP[@_"l0CEf([Dh#r>+dH=C].6POL,-V$iM$FH.A`ur4hTF",d3!'SWo\SW&
%2[lYp,bsh:6`(#Y\L^`PU>j_,'2?g:$j3pC06e(/XEFh[gEE'sVJJ<&ck@WoasBU-8!/OgPh%Ee"k;PefX\/;%qQk]`AUQW\tcV)
%41,IIK5])kNV/V`6Z"A>YrDbl%F>XZ1[1347TY(mF%`HlY@_Ed-?.>jje9(c=a.@2q0Iol<jKLAqOnoeS[D9n\YVcR\.Il?/);k_
%fE@/L3KuM4DaUUnA^(0lWI<BXn;H\Q^AUancLHd<?914E[G=+Wcl`MWP`d6mXM]iSIWJqsa(MQc%Qe2hP:$F53eM_k*T\-+4]mrM
%p^r@PqlJhufdLCo<B)I9HMV4O,7VVWq9!aR)8g'9d)\4/W87U_eJTIOQN`Neq([?d\oT?#?ta1edlQ)/%]Fk1/P#Y5lc6A;j"A*:
%DNYE?.:lm:$+UqQ=CIAtKC$!1f1q(,gHm1RWW>>B?-hZ-_jEU/hS"`+?[=duIa:"3QVg:c/N#kN9*<fWbuA@t4U*XcVME3NOW&LP
%S#B:VF<F>)GRRq6,.&kjeodh1i8sJ)CNqBmDHXHaIu9-?T^-nVOb26ZDL_\Z6BEc,`Ejh_[n]kW#Dq2,dV[3lIR_.B+9P/CRWgqt
%DR!Lrm@Bi9<r"/jZ1aF7h^2iam,j.Z*NhZk?C6(/qHYaLTp*K(%gdPSE@qf+AE_5!d*IVQ*R>FE,-j=`ZA!!^H^t`d@%Y2o?S+*Q
%a69RPr,4W48O(X)j/'>\qVer@OV#Z&L-IMK)MA@<-0-bFfb1@lC^Ar[.+So8bNV*gUF!9U#]e#U3+Oc#Km(Fj'Q^koNgViSbZOa.
%o(3]"%/[Yj:7G[c),3`s\dpUTOaH%9#!K%]'#\d-2S5c=pl\p4?CGJAolJ/=90pKr.=!Lo_q#/(J4B%fnduA)g[J..+&0kj&cg5%
%XA#28f6neo,YEkZ[HQc0kW(BGFad;'BsnL?:7(<$D^u8O[5NpQl$c&J_/\#SDU,]BBHL)BRahY,EC*D]WHJ$X+_$$Qg0T3tPMdn[
%s2\bY1EX.THQGQr>ZJ.a\`Ye<<%FN*'`bI]5eI?rp45OtST`B&BEr""1?GGb_*[)L*iCPND$.C7[aHT16)\P(#D=2O>q<<M-Wp$e
%"Y1G#Fsn"^4PF+)aTG'KN=L>t!pC0H-"b+NL*qNB9TLMafD\S_!D$[K$'`Fr2"19E&a3)kU)!q%ONGEo7([N5SHB=[?j^it&&1kN
%]i1fF^6;EgS87^?>TOT5W1Ir.H_+&M3MED8BC^BUcuT1PQJ$:O/_OTPU=04J2O.r=;,'jU\oDle[K'`DAJ*uO"eE5V3sg.L[TFk#
%VZk6U6mfN;:WXl7KF,"7"@3(OK+P6&5-op+"%Sk1cI8,_8:2h:f,COn\1Q;Cj::HeajsTF@/V^:!#QoJ%uD"ZUpEqhMNEI^m!Jj$
%5niof#Xmm!Ehn?fJLUi!f,bSO?5E/arj^8hE%p2qIitjbB>R8t;dD;m?n&H=NYq$;*8B)D[ct$Raq(1>>LbAWTh\X&l9Qe`FZNJd
%BHP@)Y*(`F0%,*<1g;8-CM";jXkg01]t!Cq:c/gXqm`:>9Q\jZ([F82p<@fh%]'IB(e`_79$r/3G!1Xf]#tr?L2?o.A7HR_.UOmc
%^N-FR<_QuZ9.Z<QRFo\IA8"H.EuUd4Ve?=<U0\>_q2(O5FCAGT+JELCW[DX?W7W.\;IY4pR=Tgb]''E+!LnW?k%KVEdg<#c\C&Hd
%WoO5X>0@YMLU?p^3N(RD45YpkE>M0I&,S*`8O:05#FM&ZbX?TcX,SXb*jK86E&6sUUW6,!T^:S!&$.*c.'uaf6NC7*=.s44021GA
%[1&6$D2]]2V`r8dcRJ\ZV0VpTGEr=/*gdI>lMC-YZD'jUUIo"9)JAB0)$Y#UNa#Q5C09^G#g[dU1_kBO@nS+$!I^W.O$o&0Sn.mJ
%MahICo]oJ='*!Q,$8^:]YbH528AMNk%sIJ=1ik2?pip28B9lg_gPf[sp0OXR4.sX&K-X7eaieu(i8=4hI,`7tZX1)qrX'S@e(4`$
%$?l]bJ.b#7(p`>#`O6a2q=6gs20\qhKoY:'SN'>5KYB*(>jh1>6Xhj%/6_/gCX%-O4.;o1c?>k.6BAD$'Y::5NbEXPOa,KG'5fmk
%"_fH#CG3OQ2uhCrGH2O,?W&boYqm($p/tDZ$#XQKW>TSSZ*3g!)%p\OBKDSf-V9OuY:@/S<S<$Jc).@-I8`tHY_j:-En!/oQXKj(
%WesLP='PWM^lYoqe_eZM'EhAA=<(g>7TBY]&>,Xa!sM(B/)OO*d)e9WH<A?l<ug#&B>$DA4C&V3$O1VXnfr(!qm6ORK]r?I)7c.>
%g/c4.UkGQ:oQ8!%oq^fFRH]RZe^kkN%NP8eRU!oOTBqY`Mse2pOk3VWGZs#@OuRn`>U`H>B@atpGL/OK!-PU;1I]9\V"^Tn$U$*S
%H&c`-#gWfL-/PA4oFlqAJOA2qL.ni?H\*`0`B9j:T%8Gu5de+pVC5-arA#iZK-jJ!BFXJ7/c\'3NapGWHlNr7h+GV,)G(6_1K$Ne
%G/$X/,uX/K3(epe#3eW=DaZ7ODr;F;2R<JDkoD\qCSdW<N$8S9qBeq'P1qi<44g9a1GZ?gp\1;'PX+#DHQ.4J--"L65[-cA7p>9Y
%@%&/Adl?aGW"S+M0Xb>Ni:dS)UiG14EI)Gg6`RWt<R_1;2ebbDCB9aZnF8&`Hk%h4<>q\/ba\WAHX2IY/ERFG"?*A-8-"I9'j[`F
%*U*[7?:>;(56Qj"Gg)'tM7]^,!jah<bhL%=UUt6qKe.UiVrJ:CE"Oun^gsi.E&d;O@=!j*Z!tW=Km`^@@u#C,a4-rtbW_qQ+PdO?
%ERB%IJ0GHal>k<i5m9076bSbK'`TSZa&\E]>J"8c_Y[e<=7]k5INfl"EuP^9ILPoM),r[,cKdSRdCt19J+&$oprhEs+(m&/gT])C
%M.HT^2NX'/JoO%.V'%"/lZ%R9_Fi*BjU;HRI2@8?H@_O4'SV$?0D:lC\Y"R/RM<6;LYha'@(D:4h/"1;/c_*#@EBhQ=I(;KIom[m
%6;&)%Fuif&@\1WW^2T[k7<0@ZN2M<\gqd/RrCdq:TFGd:(nAAtC[ls%T"HkSZ0@I[q%_UaNTYNZ6M:1rHh?:oH[P^B12X5'SVPBQ
%<:K*CEiV\$Zrt8MhVCQ:HA9hcrD'C3OdXZ)jff'c&h4bY5n2Z"#";#$HsO0>4M)^0\_V;AGfhh_#J1^p)#6J8j'"U08V7,d=4CO-
%Fc$E&p@IBZ7]GE6,O&1p$?i?W>4dt?MqK'J<\)o/XH".R`d5Q.#Go%G,\`6k`b8ao*D4q3b:>WLHHSWq'G8u8LO#_Z7-KBZ]ud1;
%kC"e.gl.IsMl)IVd#i8):'-R$,a\,0[@GOB8C:CQArAPZib2>i=hY;%C#?[sO'd9K^QNmAD1KK1aZRJd!l"Mfqh_OG-#*5r<G"0e
%n?r!.e1U%i7k,I5U8<2.Y9q5fP3b\XAle++]6JZ_WSSX2-@(!JSOIK:<\nrbF"?.q+NGbT1'TJA-g+=kO_<m?m3KRRh5mTrI/pGR
%iD"JAabCBK/R[ObR"B1F4p`EQ]<(&)FXb>!7be?pfS#K_$.-'FJm7f`&6!f>2MF-42b:@(Tk<C_M27i[9ltOLEBM2anNgn?f5`ek
%dBBXKV;b*r^JtqK[C^\.[=Pk\3]2+J[G,#6^uZJ`cJ8S!0:V>km0XVOJcVgIhmliGLd5@7P:A>e\A.7u;Q8F^6pn'>B%t/B/<T%I
%Yg(Eufii+g_9sB1DCFla-&uG(F?[*uCp]lId%I`OZ5s$qc7o@j!@SuliXcX_+f9l[m_f)7$5tI9<94oap'P412jnS6cu-rQXh,i=
%d.sU4$G[7RaUcR%a<6#p'Y"$Y.stD3^Mf[59Z'uL\tX\*9[$qn/R:]#pT]'6id$V4,aV+9U=l^F*<"#Rljn*r7);S5b@NW]6IlQo
%3B9]6b5!li7qfo@NKAFRQK9YOYe*HOFL("<`AnmP[,&Hn-BRm;9la:E,0;,V509fcPS%n<JA>f2L6.j3J:>uRDUg##NuDT=O5qM*
%qB80V+>:sNbur-0TJZ1d&OfmJVd[<l1k_;iM+19_/'8G;-ChmCG?RB&F"QUtQo,PCGi`K4ltO$Y%"ONb16bFf`q6)kC'a/8W6EUU
%/lYN;Y?rHKER>#DBQ)b]2M\u;Ni^I3_a&PLYCp4e?NqP*:a%QOU_0K1a%J`nJ1=1#"J.UBdiu\K2@h*!>W7hWR,119!'c,)\$%b#
%-.Lk_ZlskNfS1W<H>6?r.B^Q?YiM37gI`1S`&--(M,T@ChZ>#uPR_YWMEN%9f^(<.j7W1LJup)rV#Y_\Nt7a#Kn"V8N-/@CO&Vme
%Tb%r%3^L?7h&fLY<-oc_/^.\7K1\S$N/&VXcf":nAH,.[$:K6P!U2<`$)Jk]Hn]Q.[RrF0";Pr*-nn&^=7(LC/DX9N70Vuq`JNa9
%DDSJ[[@cFA@&GjSUn3]C@.,SO"^GO3G?#+a]GO^$_uYK.G.l=W9Q,j/m:sDpL9]S(B=AfuGd@Z0ME2G&)4A!21"AJg,so!2R?@<J
%$0KR&4TCG=p+Y(^]h[Edb25uB1@KD>8?0-fUB!dXWB2,+_M&t]R8bn_<Yc#,/M=9SHTefD:DRr'(8>\2`aJ8D&k2ns`rREVbn1h]
%cFK9I-haGJM@`AhnJK5ZMDf=acjTh.Sg"l=1!hQ7ci>Fo#Gc4(bU`df[o$.c0('."Lh1CY`PD!I8B49!kl#tUIdruG]A%LEp:hq>
%=a<Fen2N0c!p\#kDYo>;!U&d00drb'Q&@2gY*f8pNc[5m?3onXOh$KBKsVep'$AOq*JY>]$lkhSFl?c`q$GRV3b:mWL=lj;h$^D/
%d3HOpVd'TaPKis!\_JIjf]nE`G;:o'^M!K=KXr/5F!L:(&.IbCi_]I?`1&uGJXiB@lSt!.LNukYnR95I?Ja#^0>6"F=)HaoiFG=U
%Z69*)[<c5<g:t-eYJ9%qrqRHq=KqY4/fqd.frO[R?dnB#2pBT,pNfAmB`2.Nofu-@0_0!_4TNms5M%ggT=*.cDa,4*e'WIHN]_X'
%JWK`kJn7#01PPZol&&sRV#c\<Prc"kr"SZIOs-(jVj)uN8#.V3<,Qeq&)"uq6:MuYfg:=S&T5ZNFsbI2_=I;h?HXdXh$<Xjo6>$!
%\?09kk(W32A=B7">fm)`2;EBe/!Q&_XoZXP:5hcI,Grq@.T6&0itP$]68O0bn^FA2VW+TJJ/_Mq!KIWQ,=W/^Mp_\&-&)[*"SL_f
%(7EqMd*<)XD#/7k"-K6$(IO8[Bg%P=8W&S2<!19'X@CToZejmpj=L8<GpAtqeqhAAn3UfM,I]U@"?k#.2[,7p]Q.6-/s1IQ9^.Or
%K.F#\*kCE3*X"-n<%X8?AhGN(!4sZ-9Wp]e-Y4)cki;_Zi?)FP(/,IN--UN@n%G*JUS`Y,R,>8GQ(%bGQ!j73E*sd7WsC(uLYK"e
%i<Lp_lJ?u.q)Bc)/hh%apb=Z;!Q;2J:m"V?9LOF7!*-SjcburKU7magTKk2?e:,,Fe3HfnSu.ZSd[f&H3E!Pj,0oeQ!1<DF1O,8J
%Kn5[`,sE">@Rhm6*](QshU)S$E_odb;SV+F^Z]\bHZHRP!e5S&IjKFu_UZ6;@1Z8aPf8DI=tOIo>U-1a<CBeJ*@o'dU96EN1M<*8
%P)A,U'[p0FQpX<.-i.`o;:9qrr;@cN=iTjR4MSR1f*j25O<XR3ihQr_i$2;dW.+#nB_,&hA6RBtTb'RsncHZ6ZE=5^"k8bI`RnM&
%5VfAs4J=UScL*@&/4a0(A.Pc$N0^R,O+GHQ:"U/?D=gmtk($9>ZLK!uT6ZT;Ft_a>/X*/)aFSN)#t_)Tr66EU+(\(;lAC"^@p7)S
%/0QtiDt]a-WutqHAG2\>b7pj*g?'!';+em/-1m[9-&.9oS"*0!SV"-YHPX7qWI*IT)G!OH-&=fq2^>M<R4T8t[+eH[ooQ.@8)ur)
%XN)s/nm/\a'd:ie$usang_lK\bUYLZo5'8br"js+C<U"^OZ+&JHpJX4E\>b6NLYS+[R`Er$-SHk36b;(\i,`a8!O>P&\0T%H<-X%
%jXdX`13l%o9.\g4eHhUn#sBJq7,t\fD1]BfL8][n!'.7>D!KRr0(oE*<mXpGBs,(L,:&#JUU#S3\sQ1qI1Bp0e<3)ZW1]A8HTdNl
%/F>Pe#BSW\HY7R[Zm[-!\AV4;^'>.WQ'4Nq3hV_\-cbe6[X)OKX/7SASf>4T)0im-NtY*$^8Rb-LuM6^?,]R18o0cZpEo!';B`fW
%W:Ct'k)@"\K^YY,]*[GtHuX:&j_[9@AZ>HI&8.s+N#9Z&dU5Q6)_+5s7b<fLZ4@V*Z+SuE]s!#?KN-N$DF!R&L>Wkj`0\R$.pQ[)
%P_Ahjr2pbMA1BWBJfIJ\F,@lH*6>(<WV\$1QV?$f+*s&uOXnX1"cdjVm0K6GE^8*V(d[4VUc7C[L.:\fpeEuDE\7TuPm=KOG.t!n
%`hb/#=Z0QXhI&Nn%Z7Fp)`Za-!`%eg?_%0@X+Ib=rES+'H?o8%^3=VbGNI?<L8nW[jU=5OkYfpLQ3rFY6G6T:Grn?qRB4A:M^.M8
%h)L`@3_&g^a<=Cr*AL*?UM0C`(#)/C[%$#A$L>Q0AeX8.L4*,IS'3Fq&l0&IRtutIP/dC.T`ac7A3Zjq[$HSqaSk5l-i:<a=7X,`
%0]-"cf16)iHU/L:m/9FW6j_Iq-fqu$hBHWi8iuB>kVEp@b7.7IJ23j22I!O'VX+Eg)bQ.hRZjOE7;HeN%fA^?r(2gEK$>9+qAfQ_
%?/ZO$_L]gc0s4_o:6nX=`tU99qt9N/nCjiREE%H[lG15V3skSFEL]+2[#'C+:;p1M[G[umF8]9pNl\4Iita6tViM+[Ll,FV-+f[0
%-8=37.)*/MraDCTRj4CtdZ&f.70eQaTnE4tECIJ[.-phJFX]#X^lf*47(iuN!UCn20Y.E=&'UX"N>b5s+HG3B6qm\%ABrX`b9-Km
%l>@4bqOrqk?&$;9g.[&&"042)I4M$+EkW5':oCDf'sC:2_.%(V-fsoa>%NtVAR#?YD+K$<cUb.Aq\WS58,1RV`DDCcj(LkjJh>6U
%j,EM>d$GX:_9\5n&D&cIUD^HrkRCeLn$^.goI(.<4&T9C_Rk1.8i#Bp5@<.%e^",6K-Bn061:I$g*eASYNSfC[mk@oR^<YkP6+6#
%kAm)7J:Vrg4WQpT3%V"#Lr#-g%6Mb>;CScKE_(<k?Ts_4:B^c3$Ub3Ya0t_/\$_`[Q6:VHh#fG'.&&hq6BtrrL>r(a,#O%;mcSQi
%2];g(KXiL4Nl-#o1;Mcbb,Z0t:Q""j@8VIT)_l]TB`6$BK@$Zp]+AJ33^96/U`bnQ!ugoq_$9'?60K8i_REHt78U>$\+UgfRb"P,
%.b!V;S+qmnKCdr"_ef_uTA5L5gVAM^*2AdG3nfjYDXs-S3J7rEE!)XkDoslKIXiMuSAdT2bJ?0bSYIJOGUeT=+t\r5eS\iiISKH+
%lFq%_[Gr*D1'5*t#dtT.6&H4tK[c?j#I]ssp^eoe=^=@'-5>N3MP(MOEH(TGVRT5hKA$W`=(W9\c!_BT#[VV@[N2:n2Bn<:E=Eb=
%\G[nd%&UPUM_3^/F+r<O_Wl?6$G\"8ke1_.oL<Q9<Y%St"C#[rUs,+Q7a3M,6l5.H'qE]+d4u/)>?30p4>Z89E(,"^hN.F!09/T9
%6*\$]aq:'lJ-XemU"kl,])4&8i^p-],uT0o;7X!CQPl#Fb+bZ3X`m4]Yd61;fbr!C_$)G^QR+Re!b"a^D_qRR*"[JnNi_cH&+-$&
%7)srdiYV)Q>@##II#&16/.16WSf1E2g&&WI>VNB;?*9i.H#a,Iil-RK``mX&LKr(:rCZus>P*#B>%r^m']mLKTl!QSRU74"+_qAs
%e4`E5+ml,a^T8D-.(0*u2feD"<4>.EnMV.<g)//MeE(5moROfcj>Ndl79[0c;AGC>gFTgBJ=6`Xi5h;7GPh0qQT"TA!8P;>OR]s*
%d`<!GSqH?`)O7D%IejhqRYZ?K='[-o[&K!h7.s;Q3ng,%;,SB<6(I`N\52s2#Rt&(*^cV*k*+soMMq3$;`4E_W5\%*8+E.SkP^Bh
%r6jF$ip?YV7i@k(73@qR!QjZ*J.4E"l:jYV_NBZKZ?7uJ*$oXqaAu_;qKO=M<T\hPb\Aq.N8k@nP%#%JEdhQS"^hu%nYpn^A`=L-
%UuT"d>!h]Go])9Us8,R;B*[*Ko[!f;QF=c6;Dr9k68gHB3MbsFU*1&$noHToB,<t]$hIaKSOP]V4<E6Q+dR/&#'3)<N]%X>Z>Pg,
%+%q(UWU2'0P=tsVn/c`V!e+A9@#hs<5)T*]c2/E_jQ]%WKt?F:5/\_0J#@ui]*'$R*SF*$]6_l`HadsLR_ZfnmZAt[B_eHk9KoF4
%nkG@[YB0k(/(%Q[]spN;Ar+:&LP.ieO4EBTPKuf3f@&CY1_p3#e*VUGbR$YMp_6HDf*VNNGTo!W-s2&h?,Hdi%6A_lI^eVD_DN?;
%jW*L7GZpnYQ`W`[@A495D!f'7:F_g&9EiAPoC(?!:2A-GCGL;e#P/'I:C:LXNIiJe8-O5[IVPoZc_aX1XJ?'bBCZW3<$IC#Kg?Rl
%i,,<=g3)jIem=Aj1<d5$]Zn8j'nO_6Oo@O-:ej+VG!%P'28GP\[".;t<a=?X>]`SR!H:0![fVqW20j[R:oYOP%GO7_gFFA\Y^cX]
%Vp,/P\lhQjK@fBNn5$nIMf!(/(&]Qc)iWBBFL'-M9"o$3aCnF0J1uq[^i=?3F9<@*%Bd]3YrbB;OC5Gm>QOP8lMp$LU\7*`RPS4N
%<Lnjpr1g:P'C\\;&E"a4Rr6s7&uD1/N?XK2TIn!C[[)sg033h/@A*o6L7Xab_'@W/"=7Ehj7HM#FV:(O"[rEkRZ45">$AmWBsjpF
%NH!7#<i)`-Hk>/3H=.$t!>-a)VP;s]<jio5'U:UTmm1,d,sf&Jok2-3=(>_-q]d+Q3XTH]]&]:'(<RB_][-[8KE;N325jn?3J>!O
%&5d#/1SSb"km.i&huW&jCj"G`9hXZHeVLUJSo04;=;0jX[>@nh!hp'[@BdX%krfs.VO2S#c\Vci?#k$6qf7K?m5jVNXZ@cj&gY8A
%T0[%>Zpk?%F<r<0SRUgV"e$*soA-GFMoKjA8t'(^brYH)+;`h%*hIh[7ggObPMRi/Qd_.l7$B$fKfk8DXDW*=lo!63P^-.7\Utr_
%$]6O?B!`CZ2aa>[c6L(%2N(1Wd(aNgVR2*QGl]#arn7rI]nj)?M>4pGniHU3&;Goi7%1IT>K=CHp/(DN/XJ(RK"]NV#[*/n$".?0
%kLbe6,OYZcKm+/Bfgi[]!SqhK:6F/7#rt2^EjZ`KS5N64PD0UU=pVPM3gK1q>PCVD]qE.$HMAi?)nS4hX]QbCD17#6]E^'a?`3'`
%-']pZ*I2IaH7@2\<#fhN&%E-\3N1?-aE\M8T/F3LKpn+j/?A#cRk!PW*ElQU'b3gR$OMM\W)8I`Us4?IK#^PDIrNPZ;tVW-f"l&t
%>'e,X[i99PiP#Lb7W,3"F7T_K?RZ3k;6p+5ar9<c./+=$B_]B-"!JE1J0(Wuqee_bIVG+_fPJp?!*pL&-YbdVJKjH/"V5oI`LRqG
%'G$C>LhBQ)=X#565*S:=1Q2"]UWlAP+NT,:a[P@E4RJkbHI=V:RYTsDOV8s[T"n!dSJq@,8H$a,UYYBE5?&gT-?1O-+n93bKrlHX
%9^-2aCVN/(f+7Td%NFt04QA,+Snj2ed@)?P*pg)/c6AT6II9:3A<nku.7J5'UO7_*rMgJ6q0Sg<6XubN8J'^bJ#$_!I0k`rq<.85
%qd%;]fIfuO4h85@r,CS"np3W7maINtnOmfoB,6#cqg9MF-VI)bRV\Ph=q2MYMW`sI/$,S21Rs8jBLQdC[Eo)Mq+<%J$Z&-kTH0HX
%d<[A7]^j0r?`+&@M]u,/0*,s>eV1pY(G>Opq;pY06`=o8BJO8=%g??p&-5G(+l`nu>LA!`bG2jn&,.IR<K8%KT$0PZETVT5!BdsU
%W=P*-a5(>]jDntaK@/fbeJZp5c_g?pQfe+eYCiq;OD,9CMBTc\mVVS.'m\cd`"U%)%;@<GoaS=aWr*EX'K;5!>6BqN=`'86TlfPc
%Z^Tf'@sl:HRWa?3>*m(-80LolU:Ke?&p($ULRd=]Wj11%roX9F"Yt.t]eE=qQ<*9h77W?-H432g(VcIlW,?&ZW!1KKI5s.JQAmj(
%k!Pu?O_6^7*RmV2"q@7H+\VnbdcLl?)aStC7I"Je,!5<9fQ-YqF=:-+-+a[$"[@=C!9p<#$mRGF^9DM\II.'S?*Y[Q[RairYpiW?
%h&H:eV:YRebt[),,/+eR8a!h21?PAA5``#EK[_,3D^A#$d7HuB[)Z)D#N<<@e:ZO#qAA0UgI[P^Gu9X]<@K%;1hVq!@-a9@*nF't
%LM;MHA>P6KJ/1qI>^C@^MD7d?c7i+Mi;'a)+kPktC6=]dB@*TVb;&?<A/:H].j!o5Zm-o#frqD>dJL/)V,JjII1r.8"ab\h=HHG%
%9$5JOl_+?;`r/5DOG&2[Z!kY0Y)>g_Wi'D!nIQ8/Hqn^IVJ$hn]C)*-FT`@#Id#m)56saLBs(!f2^7HK=G%T-#I0e/`8VpdNFY)?
%I)G2kQB__!ba&bE!Ktoq4=/_KaK(E*#P1B2^lBWZh?$FOW&lQ/.JlCH&dFNmPr41#8>`9)&A5u%R]#a<X4_h<)FFG8Pi^gU\4JMg
%MbRAk0#LQmY\[>%N-E-WAEc"g!5pKA&I6]\[ccS8!"Y(\>MaC4'g\*QOPg;GpnHU9K8`=>;`&,u!sgqQ*6OabGtIACo6MS=;8d*>
%rJ"1kdt`>3%'fSg_7PqW>9pajY_t`!mO@rjA.a)]h=MIEjR>#e+f^Q3U_PYJ*Qf#\non<e_+Rr,jiEQPRbl2q<8V^508T8cjJpHW
%XJ`F7*E>[dF\jkk%&0>DO,a?lAXd&)WsI8dpaObFB5]CNGK"ku+f$;0+P&9J24':";fK-HAu@"13i:B9L\r=nn]Ali3+kW"a9("*
%ZIr6n[dMOPg+XVUQoZkZ@VoV,O%UU%OR"H.?E!cc,QV7,1S3#]([9.*EGl-X_&gtIi)3``=3f7L"2JP5I5c`#XsM(RAOT$tqQq]&
%>qp(Z,H$o$4He9)MTESUJXlgE:8+]@\71qPgA[9$-AlWjqk8t8do[<STY<5_kZUcRBZY<2O)!YS8960Zj3Ya4Cbi>lBk.S$fIkZL
%GF'ktN0r,o$h9u>p!?'NnUYXK,o("#E;M9Y?*0PU,,!j@Cu8Q;"/!0nL0,Cf%oA7e8;-KfRm,](%2YW(WOr[G2fcCOKZlB5e)7;L
%G.CqNX#S3PBqBUQW.^lcX5X1GPZ2KlL:;s<#KW\T3t<f,";i=%Et;XDXD3fRT%2;bCEX]%ZoX_h2U0(i(6!fTGOOK%/;n^!i(9hS
%a=#f>RRWp@;j?@XE/=L&OH$]j2Ig*"J,!:a0-k#XFVFlmN:!5=Ojt]HNXS(e#s^G5*P*jI_SHP96D\92.g?kCcmYWk;hp)7<$srE
%6qgQ9&aV<+5qW+YZPf?:25%;`\W\RWJR5cBO2d(RBSb[gLWX4>`58<B+DlWNN>Q:tD"IYr@`n^0"<-"//Uu*E7P4XXs0$A@lT]3`
%l+b,Qq=ie6[Ce`XJ,62fm2qQGm7j^!G2s7i/=%E0Hm47g9qLBR'O.*H/#?q<Sao/7+1.B3/NJaCA]flW7B,M+VKiI9jhcN>#87\(
%a/Uo<oF[\m2O,S8OT@$OVtZq!5:Lpf&c6[jm8;/f\LCm+QTffCSb.!;oH4(grqCp>+8c*2p](#\s7")/mn\F^4SHSJrU576LHk_Z
%J,\JXq=.71rn%28+9(Mcs3I<DrqMQSa>a.`^[6Msq1h37l(@tPJ,Su2?N03hric>T,@'lRi:$[5n,Ljdpt,Q2Ife(`ORr~>
%AI9_PrivateDataEnd
